{
  "version": 3,
  "sources": ["../node_modules/dayjs/plugin/quarterOfYear.js", "../node_modules/dayjs/dayjs.min.js", "../src/quick-add-reminder.tsx", "../node_modules/chrono-node/src/results.ts", "../node_modules/chrono-node/src/types.ts", "../node_modules/chrono-node/src/utils/dayjs.ts", "../node_modules/chrono-node/src/timezone.ts", "../node_modules/chrono-node/src/utils/pattern.ts", "../node_modules/chrono-node/src/calculation/years.ts", "../node_modules/chrono-node/src/locales/en/constants.ts", "../node_modules/chrono-node/src/common/parsers/AbstractParserWithWordBoundary.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitWithinFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameLittleEndianParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameMiddleEndianParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENMonthNameParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualYearMonthDayParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENSlashMonthFormatParser.ts", "../node_modules/chrono-node/src/common/parsers/AbstractTimeExpressionParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeExpressionParser.ts", "../node_modules/chrono-node/src/utils/timeunits.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitAgoFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitLaterFormatParser.ts", "../node_modules/chrono-node/src/common/abstractRefiners.ts", "../node_modules/chrono-node/src/common/refiners/AbstractMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeDateRangeRefiner.ts", "../node_modules/chrono-node/src/calculation/mergingCalculation.ts", "../node_modules/chrono-node/src/common/refiners/AbstractMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeDateTimeRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ExtractTimezoneAbbrRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ExtractTimezoneOffsetRefiner.ts", "../node_modules/chrono-node/src/common/refiners/OverlapRemovalRefiner.ts", "../node_modules/chrono-node/src/common/refiners/ForwardDateRefiner.ts", "../node_modules/chrono-node/src/common/refiners/UnlikelyFormatFilter.ts", "../node_modules/chrono-node/src/common/parsers/ISOFormatParser.ts", "../node_modules/chrono-node/src/common/refiners/MergeWeekdayComponentRefiner.ts", "../node_modules/chrono-node/src/configurations.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualDateParser.ts", "../node_modules/chrono-node/src/common/casualReferences.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENCasualTimeParser.ts", "../node_modules/chrono-node/src/common/calculation/weekdays.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENWeekdayParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENRelativeDateFormatParser.ts", "../node_modules/chrono-node/src/common/parsers/SlashDateFormatParser.ts", "../node_modules/chrono-node/src/locales/en/parsers/ENTimeUnitCasualRelativeFormatParser.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeRelativeAfterDateRefiner.ts", "../node_modules/chrono-node/src/locales/en/refiners/ENMergeRelativeFollowByDateRefiner.ts", "../node_modules/chrono-node/src/locales/en/configuration.ts", "../node_modules/chrono-node/src/chrono.ts", "../node_modules/chrono-node/src/locales/en/index.ts", "../node_modules/chrono-node/src/index.ts", "../node_modules/date-fns/toDate.mjs", "../node_modules/date-fns/constructFrom.mjs", "../node_modules/date-fns/addDays.mjs", "../node_modules/date-fns/addMonths.mjs", "../node_modules/date-fns/addMilliseconds.mjs", "../node_modules/date-fns/constants.mjs", "../node_modules/date-fns/addHours.mjs", "../node_modules/date-fns/_lib/defaultOptions.mjs", "../node_modules/date-fns/startOfWeek.mjs", "../node_modules/date-fns/startOfISOWeek.mjs", "../node_modules/date-fns/getISOWeekYear.mjs", "../node_modules/date-fns/startOfDay.mjs", "../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs", "../node_modules/date-fns/differenceInCalendarDays.mjs", "../node_modules/date-fns/startOfISOWeekYear.mjs", "../node_modules/date-fns/addYears.mjs", "../node_modules/date-fns/isDate.mjs", "../node_modules/date-fns/isValid.mjs", "../node_modules/date-fns/startOfYear.mjs", "../node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs", "../node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs", "../node_modules/date-fns/locale/en-US/_lib/formatLong.mjs", "../node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs", "../node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs", "../node_modules/date-fns/locale/en-US/_lib/localize.mjs", "../node_modules/date-fns/locale/_lib/buildMatchFn.mjs", "../node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs", "../node_modules/date-fns/locale/en-US/_lib/match.mjs", "../node_modules/date-fns/locale/en-US.mjs", "../node_modules/date-fns/getDayOfYear.mjs", "../node_modules/date-fns/getISOWeek.mjs", "../node_modules/date-fns/getWeekYear.mjs", "../node_modules/date-fns/startOfWeekYear.mjs", "../node_modules/date-fns/getWeek.mjs", "../node_modules/date-fns/_lib/addLeadingZeros.mjs", "../node_modules/date-fns/_lib/format/lightFormatters.mjs", "../node_modules/date-fns/_lib/format/formatters.mjs", "../node_modules/date-fns/_lib/format/longFormatters.mjs", "../node_modules/date-fns/_lib/protectedTokens.mjs", "../node_modules/date-fns/format.mjs", "../node_modules/date-fns/getDay.mjs", "../node_modules/date-fns/nextDay.mjs", "../node_modules/date-fns/nextFriday.mjs", "../node_modules/date-fns/nextSaturday.mjs", "../node_modules/date-fns/nextSunday.mjs", "../node_modules/date-fns/subHours.mjs", "swift:/Users/runner/work/extensions/extensions/extensions/apple-reminders/swift/AppleReminders"],
  "sourcesContent": ["!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=n():\"function\"==typeof define&&define.amd?define(n):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs_plugin_quarterOfYear=n()}(this,(function(){\"use strict\";var t=\"month\",n=\"quarter\";return function(e,i){var r=i.prototype;r.quarter=function(t){return this.$utils().u(t)?Math.ceil((this.month()+1)/3):this.month(this.month()%3+3*(t-1))};var s=r.add;r.add=function(e,i){return e=Number(e),this.$utils().p(i)===n?this.add(3*e,t):s.bind(this)(e,i)};var u=r.startOf;r.startOf=function(e,i){var r=this.$utils(),s=!!r.u(i)||i;if(r.p(e)===n){var o=this.quarter()-1;return s?this.month(3*o).startOf(t).startOf(\"day\"):this.month(3*o+2).endOf(t).endOf(\"day\")}return u.bind(this)(e,i)}}}));", "!function(t,e){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define(e):(t=\"undefined\"!=typeof globalThis?globalThis:t||self).dayjs=e()}(this,(function(){\"use strict\";var t=1e3,e=6e4,n=36e5,r=\"millisecond\",i=\"second\",s=\"minute\",u=\"hour\",a=\"day\",o=\"week\",c=\"month\",f=\"quarter\",h=\"year\",d=\"date\",l=\"Invalid Date\",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:\"en\",weekdays:\"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday\".split(\"_\"),months:\"January_February_March_April_May_June_July_August_September_October_November_December\".split(\"_\"),ordinal:function(t){var e=[\"th\",\"st\",\"nd\",\"rd\"],n=t%100;return\"[\"+t+(e[(n-20)%10]||e[n]||e[0])+\"]\"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:\"\"+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?\"+\":\"-\")+m(r,2,\"0\")+\":\"+m(i,2,\"0\")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||\"\").toLowerCase().replace(/s$/,\"\")},u:function(t){return void 0===t}},g=\"en\",D={};D[g]=M;var p=\"$isDayjsObject\",S=function(t){return t instanceof _||!(!t||!t[p])},w=function t(e,n,r){var i;if(!e)return g;if(\"string\"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split(\"-\");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},O=function(t,e){if(S(t))return t.clone();var n=\"object\"==typeof e?e:{};return n.date=t,n.args=arguments,new _(n)},b=v;b.l=w,b.i=S,b.w=function(t,e){return O(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var _=function(){function M(t){this.$L=w(t.locale,null,!0),this.parse(t),this.$x=this.$x||t.x||{},this[p]=!0}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(b.u(e))return new Date;if(e instanceof Date)return new Date(e);if(\"string\"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||\"0\").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return b},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=O(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return O(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<O(t)},m.$g=function(t,e,n){return b.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!b.u(e)||e,f=b.p(t),l=function(t,e){var i=b.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return b.w(n.toDate()[t].apply(n.toDate(\"s\"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v=\"set\"+(this.$u?\"UTC\":\"\");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+\"Hours\",0);case u:return $(v+\"Minutes\",1);case s:return $(v+\"Seconds\",2);case i:return $(v+\"Milliseconds\",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=b.p(t),f=\"set\"+(this.$u?\"UTC\":\"\"),l=(n={},n[a]=f+\"Date\",n[d]=f+\"Date\",n[c]=f+\"Month\",n[h]=f+\"FullYear\",n[u]=f+\"Hours\",n[s]=f+\"Minutes\",n[i]=f+\"Seconds\",n[r]=f+\"Milliseconds\",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[b.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=b.p(f),y=function(t){var e=O(l);return b.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return b.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||\"YYYY-MM-DDTHH:mm:ssZ\",i=b.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return b.s(s%12||12,t,\"0\")},$=f||function(t,e,n){var r=t<12?\"AM\":\"PM\";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case\"YY\":return String(e.$y).slice(-2);case\"YYYY\":return b.s(e.$y,4,\"0\");case\"M\":return a+1;case\"MM\":return b.s(a+1,2,\"0\");case\"MMM\":return h(n.monthsShort,a,c,3);case\"MMMM\":return h(c,a);case\"D\":return e.$D;case\"DD\":return b.s(e.$D,2,\"0\");case\"d\":return String(e.$W);case\"dd\":return h(n.weekdaysMin,e.$W,o,2);case\"ddd\":return h(n.weekdaysShort,e.$W,o,3);case\"dddd\":return o[e.$W];case\"H\":return String(s);case\"HH\":return b.s(s,2,\"0\");case\"h\":return d(1);case\"hh\":return d(2);case\"a\":return $(s,u,!0);case\"A\":return $(s,u,!1);case\"m\":return String(u);case\"mm\":return b.s(u,2,\"0\");case\"s\":return String(e.$s);case\"ss\":return b.s(e.$s,2,\"0\");case\"SSS\":return b.s(e.$ms,3,\"0\");case\"Z\":return i}return null}(t)||i.replace(\":\",\"\")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=b.p(d),m=O(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return b.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:b.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=w(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return b.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),k=_.prototype;return O.prototype=k,[[\"$ms\",r],[\"$s\",i],[\"$m\",s],[\"$H\",u],[\"$W\",a],[\"$M\",c],[\"$y\",h],[\"$D\",d]].forEach((function(t){k[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),O.extend=function(t,e){return t.$i||(t(e,_,O),t.$i=!0),O},O.locale=w,O.isDayjs=S,O.unix=function(t){return O(1e3*t)},O.en=D[g],O.Ls=D,O.p={},O}));", "import {\n  AI,\n  closeMainWindow,\n  environment,\n  getPreferenceValues,\n  LaunchProps,\n  LocalStorage,\n  showToast,\n  Toast,\n} from \"@raycast/api\";\nimport * as chrono from \"chrono-node\";\nimport { format, addDays, nextSunday, nextFriday, nextSaturday, addYears, subHours } from \"date-fns\";\nimport { createReminder, getData } from \"swift:../swift/AppleReminders\";\n\nimport { NewReminder } from \"./create-reminder\";\nimport { Data } from \"./hooks/useData\";\n\nexport default async function Command(props: LaunchProps<{ arguments: Arguments.QuickAddReminder }>) {\n  try {\n    const preferences = getPreferenceValues<Preferences.QuickAddReminder>();\n\n    if (preferences.shouldCloseMainWindow) {\n      await closeMainWindow();\n    } else {\n      await showToast({ style: Toast.Style.Animated, title: \"Adding to-do\" });\n    }\n\n    if (!environment.canAccess(AI) || preferences.dontUseAI) {\n      const text = props.arguments.text;\n\n      let reminderList;\n      let dueDate;\n      let isDateTime;\n\n      const dateMatch = chrono.parse(text);\n      if (dateMatch && dateMatch.length > 0) {\n        const chronoDate = dateMatch[0].start;\n        isDateTime = chronoDate.isCertain(\"hour\") || chronoDate.isCertain(\"minute\") || chronoDate.isCertain(\"second\");\n        const date = chronoDate.date();\n        dueDate = isDateTime ? date.toISOString() : format(date, \"yyyy-MM-dd\");\n      }\n\n      const listMatch = text.match(/#(\\w+)/);\n\n      if (listMatch) {\n        const data: Data = await getData();\n        reminderList = data.lists.find((list) => list.title.toLowerCase() === listMatch[1].toLowerCase());\n      }\n\n      // Clean all values matching from text and previous white space as title constant\n      const title = text\n        .replace(listMatch ? listMatch[0] : \"\", \"\")\n        .replace(dateMatch && dateMatch.length > 0 ? dateMatch[0].text : \"\", \"\")\n        .replace(/\\s+/g, \" \")\n        .trim();\n\n      const reminder: NewReminder = { title, listId: reminderList?.id, dueDate };\n\n      if (props.arguments.notes) {\n        reminder.notes = props.arguments.notes;\n      }\n\n      await createReminder(reminder);\n\n      const formattedDueDate = dueDate ? ` due ${format(dueDate, `${isDateTime ? \"PPPpp\" : \"PPP\"}`)}` : \"\";\n      const toastMessage = `Added \"${title}\" to ${reminderList?.title ?? \"default list\"}${formattedDueDate}`;\n\n      await showToast({\n        style: Toast.Style.Success,\n        title: toastMessage,\n      });\n      return;\n    }\n\n    await showToast({\n      style: Toast.Style.Animated,\n      title: \"Adding reminder\",\n    });\n\n    const data: Data = await getData();\n\n    const lists = data.lists.map((list) => {\n      return `${list.title}:${list.id}`;\n    });\n\n    const now = new Date();\n    const today = format(now, \"yyyy-MM-dd\");\n    const currentTime = format(now, \"HH:mm\");\n    const tomorrow = format(addDays(now, 1), \"yyyy-MM-dd\");\n    const friday = format(nextFriday(now), \"yyyy-MM-dd\");\n    const saturday = format(nextSaturday(now), \"yyyy-MM-dd\");\n    const sunday = format(nextSunday(now), \"yyyy-MM-dd\");\n\n    // Pick a relatively recent date; when referred to by Month/Day we should return next year\n    const recentDate = addDays(now, -3);\n    const recentDateMonth = format(recentDate, \"MMM\");\n    const recentDateDay = format(recentDate, \"d\");\n    const nextRecentDate = format(addYears(recentDate, 1), \"yyyy-MM-dd\");\n\n    // Pick an upcoming day. When referring to \"next <day>\" we should pick a week from then\n    const upcoming = addDays(now, 2);\n    const upcomingDate = format(upcoming, \"yyyy-MM-dd\");\n    const upcomingDateWeekday = format(upcoming, \"EEEE\");\n    const upcomingDateWeekdayNext = format(addDays(now, 9), \"yyyy-MM-dd\");\n\n    // Pick a recent time. When referring to that time we should pick tomorrow\n    const oneHourAgo = format(subHours(now, 1), \"haa\"); // won't work well 12:00am-12:59am\n    const oneHourAgoTomorrow = format(addDays(subHours(now, 1), 1), \"yyyy-MM-dd'T'HH:00:ss\");\n    const oneHourFromNow = format(subHours(now, -1), \"haa\"); // won't work well 11:00pm-11:59pm\n    const oneHourFromNowToday = format(addDays(subHours(now, -1), 1), \"yyyy-MM-dd'T'HH:00:ss\");\n\n    const locations = await LocalStorage.getItem(\"saved-locations\");\n\n    const prompt = `Act as a NLP parser for tasks. I'll give you a task text and you'll return me only a parsable and minified JSON object.\\n\n\nHere's the JSON Object structure:\n{\n  \"title\": <Task title>,\n  \"description\": <Task description. A human-readable description of the task. Use relative dates when appropriate. Include the task name in single quotes. Always include the list (or \"default list\" if none is specified). Always include the priority level if specified. Always include the recurrence if specified.>,\n  \"priority\": <Task priority. Only pick the value from this list: \"low\", \"medium\", \"high\". Use the \"high\" priority if the task text specifies a word such as \"urgent\", \"important\", or an exclamation mark.>,\n  \"listId\": <Task list ID. Pick it from the following table by finding the list name corresponding to an ID: ${lists}. Don't add a listId if the user hasn't specified a list name. Note that the user can prepend the \"#\" or \"@\" symbols to list names, for example, \"#work\" or \"@work\".>,\n  \"dueDate\": <Task due date. Can either be a full day date (YYYY-MM-DD) or an ISO date if the time is specified (YYYY-MM-DDTHH:mm:ss.sssZ). Use sensible defaults for common timeframes (e.g \"8am\" for \"morning\", \"1pm\" for \"afternoon\", \"6pm\" for \"evening\"). A number with \"a\" or \"p\" appended (e.g. \"1p\" or \"8a\") should be treated as AM or PM. Never use dates before ${today} unless the specific month/day/year is provided. If the user includes a time before ${currentTime} and no date, assume they mean tomorrow>,\n  \"recurrence\": {\n    \"frequency\": <Recurrence frequency. Only pick the value from this list: \"daily\", \"weekly\", \"monthly\", \"yearly\".>,\n    \"interval\": <Recurrence interval. An integer greater than 0 that specifies how often a pattern repeats. If a recurrence frequency is \"weekly\" rule and the interval is 1, then the pattern repeats every week. If a recurrence frequency is \"monthly\" rule and the interval is 3, then the pattern repeats every 3 months.>,\n    \"endDate\": <Recurrence end date. A full day date (YYYY-MM-DD). If no end date is specified, the recurrence will repeat forever.>\n  },\n  \"address\": <Task address. If the task text specifies an address, include it here.>,\n  \"proximity\": <Task proximity. Only pick the value from this list: \"enter\", \"leave\".>\n  \"radius\": <Task radius. A number that specifies the radius around the location in meters.>\n}\n\nHere are the rules you must follow:\n- You MUST return a valid, parsable JSON object.\n- Any text in quotes should be taken in its entirely as the task's title, and not interpreted for dates, priority, lists, etc.\n- The title is made up of all the words you can't parse, in order. NEVER drop words.\n- Always capitalize weekday, month, and list names in your output.\n- Don't include a time unless specifically indicated by the user.\n- Today is ${today} and the current time is ${currentTime}.\n- Pay special attention to \"this\" vs \"next\" day of the week.\n- The weekend begins on Saturday and the week begins on Monday. (e.g. tasks for \"next week\" would be scheduled for the upcoming Monday.)\n- Any recurring task MUST include a dueDate. If no due date is specified, use one that makes the most sense.\n- If the user seems to specify an address, search for a matching location in the following data set: ${locations}.\n\nHere are some examples to help you out:\n- Respond to email: {\"title\":\"Respond to email\"}\n- Book flights today: {\"title\":\"Book flights\",\"description\":\"'Book flights' today to default list\",\"dueDate\":\"${today}\"}\n- Collect dry cleaning this evening: {\"title\":\"Collect dry cleaning\",\"description\":\"'Collect dry cleaning' today at 6pm to default list\",\"dueDate\":\"${today}T18:00:00.000Z\"}\n- Ship feature low priority: {\"title\":\"Ship feature\",\"description\":\"'Ship feature' (low priority) to default list\",\"priority\":\"low\"}\n- Pay taxes this weekend important: {\"title\":\"Pay taxes\",\"description\":\"'Pay taxes' (high priority) on Saturday to default list\",\"priority\":\"high\",\"dueDate\":\"${saturday}\"}\n- Check for newspaper today!: {\"title\":\"Check for newspaper\",\"description\":\"'Check for newspaper' (high priority) today to default list\",\"dueDate\":\"${today}\",\"priority\":\"high\"} \n- Take a walk ${oneHourFromNow}: {\"title\":\"Take a walk\",\"description\":\"'Take a walk' today at ${oneHourFromNow} to default list\",\"dueDate\":\"${oneHourFromNowToday}\"}\n- Take a walk ${oneHourAgo}: {\"title\":\"Take a walk\",\"description\":\"'Take a walk' tomorrow at ${oneHourAgo} to default list\",\"dueDate\":\"${oneHourAgoTomorrow}\"}\n- Eat ${oneHourFromNow} nachos: {\"title\":\"Eat nachos\",\"description\":\"'Eat nachos' today at ${oneHourFromNow} to default list\",\"dueDate\":\"${oneHourFromNowToday}\"}\n- Get groceries ${upcomingDateWeekday}: {\"title\":\"Get groceries\",\"description\":\"'Get groceries' on ${upcomingDate} to default list\",\"dueDate\":\"${upcomingDate}\"}\n- Get groceries next ${upcomingDateWeekday}: {\"title\":\"Get groceries\",\"description\":\"'Get groceries' on ${upcomingDateWeekdayNext} to default list\",\"dueDate\":\"${upcomingDateWeekdayNext}\"}\n- Read a book every day: {\"title\":\"Read a book\",\"description\":\"'Read a book' daily to default list\",\"dueDate\":\"${today}\",\"recurrence\":{\"frequency\":\"daily\",\"interval\":1}, }\n- Read every book fri: {\"title\":\"Read every book\",\"description\":\"'Read every book' on Friday to default list\",\"dueDate\":\"${friday}\"}\n- Read books every fri: {\"title\":\"Read books\",\"description\":\"'Read books' weekly on Fridays to default list\",\"dueDate\":\"${friday}\",\"recurrence\":{\"frequency\":\"weekly\",\"interval\":1}}\n- Clean the house every sunday: {\"title\":\"Clean the house\",\"description\":\"'Clean the house' weekly on Sundays to default list\",\"dueDate\":\"${sunday}\",\"recurrence\":{\"frequency\":\"weekly\",\"interval\":1}\n- Call mom monthly on sunday: {\"title\":\"Call mom\",\"description\":\"'Call mom' monthly starting ${sunday} to default list\",\"dueDate\":\"${sunday}\",\"recurrence\":{\"frequency\":\"monthly\",\"interval\":1}}\n- Dad's birthday on ${recentDateMonth} ${recentDateDay}: {\"title\":\"Dad's birthday\",\"description\":\"'Dad's birthday' on ${nextRecentDate} to default list\",\"dueDate\":\"${nextRecentDate}\"}\n- Monthly breakfast with friends Saturday: {\"title\":\"Monthly breakfast with friends\",\"description\":\"'Monthly breakfast with friends' recurring monthly starting ${saturday} to default list\",\"dueDate\":\"${saturday}\",\"recurrence\":{\"frequency\":\"monthly\",\"interval\":1}}\n- Review budget every 2 months starting from tomorrow: {\"title\":\"Review budget\",\"description\":\"'Review budget' every 2 months starting ${tomorrow} to default list\",\"dueDate\":\"${tomorrow}\", \"recurrence\":{\"frequency\":\"monthly\",\"interval\":2}}\n- Water the flowers every day from tomorrow until ${upcomingDateWeekday}: {\"title\":\"Water the flowers\",\"description\":\"'Water the flowers' every day from ${tomorrow} until ${upcomingDate} to default list\",\"dueDate\":\"${tomorrow}\",\"recurrence\":{\"frequency\":\"daily\",\"interval\":1,\"endDate\":\"${upcomingDate}\"}}\n- Cook meals until ${upcomingDateWeekday}: {\"title\":\"Cook meals\",\"description\":\"'Cook meals' every day until ${upcomingDate} to default list\",\"dueDate\":\"${today}\",\"recurrence\":{\"frequency\":\"daily\",\"interval\":1,\"endDate\":\"${upcomingDate}\"}}\n\nTask text: \"${props.fallbackText ?? props.arguments.text}\"`;\n\n    const { description, ...newReminder } = await askAI(prompt);\n    if (props.arguments.notes) {\n      newReminder.notes = props.arguments.notes;\n    }\n\n    if (newReminder.dueDate && newReminder.dueDate.includes(\"T\")) {\n      const date = new Date(newReminder.dueDate);\n      const timezoneOffset = date.getTimezoneOffset() * 60 * 1000;\n      newReminder.dueDate = new Date(date.getTime() + timezoneOffset).toISOString();\n    }\n\n    await createReminder(newReminder);\n\n    await showToast({\n      style: Toast.Style.Success,\n      title: \"Added reminder: \" + description,\n    });\n  } catch (error) {\n    console.log(error);\n    const message = error instanceof Error ? error.message : JSON.stringify(error);\n\n    await showToast({\n      style: Toast.Style.Failure,\n      title: \"Unable to add reminder\",\n      message,\n    });\n  }\n}\n\nasync function askAI(prompt: string): Promise<NewReminder & { description: string }> {\n  const maxRetries = 3;\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      const result = await AI.ask(prompt, { model: AI.Model.OpenAI_GPT4o });\n      const jsonMatch = result.match(/[{\\\\[]{1}([,:{}\\\\[\\]0-9.\\-+Eaeflnr-u \\n\\r\\t]|\".*?\")+[}\\]]{1}/gis)?.[0];\n      if (!jsonMatch) {\n        throw new Error(\"Invalid result returned from AI\");\n      }\n      const json = JSON.parse(jsonMatch.trim());\n      if (json.recurrence && !json.dueDate) {\n        throw new Error(\"Recurrence without dueDate\");\n      }\n      return json;\n    } catch (error) {\n      console.log(`Retriying AI call. Retry count: ${i}`);\n    }\n  }\n\n  throw new Error(\"Max retries reached. Unable to get a valid response from AI.\");\n}\n", "import { Component, ParsedComponents, ParsedResult, ParsingReference } from \"./types\";\n\nimport quarterOfYear from \"dayjs/plugin/quarterOfYear\";\nimport dayjs, { QUnitType } from \"dayjs\";\nimport { assignSimilarDate, assignSimilarTime, implySimilarTime } from \"./utils/dayjs\";\nimport { toTimezoneOffset } from \"./timezone\";\ndayjs.extend(quarterOfYear);\n\nexport class ReferenceWithTimezone {\n    readonly instant: Date;\n    readonly timezoneOffset?: number | null;\n\n    constructor(input?: ParsingReference | Date) {\n        input = input ?? new Date();\n        if (input instanceof Date) {\n            this.instant = input;\n        } else {\n            this.instant = input.instant ?? new Date();\n            this.timezoneOffset = toTimezoneOffset(input.timezone, this.instant);\n        }\n    }\n\n    /**\n     * Returns a JS date (system timezone) with the { year, month, day, hour, minute, second } equal to the reference.\n     * The output's instant is NOT the reference's instant when the reference's and system's timezone are different.\n     */\n    getDateWithAdjustedTimezone() {\n        return new Date(this.instant.getTime() + this.getSystemTimezoneAdjustmentMinute(this.instant) * 60000);\n    }\n\n    /**\n     * Returns the number minutes difference between the JS date's timezone and the reference timezone.\n     * @param date\n     * @param overrideTimezoneOffset\n     */\n    getSystemTimezoneAdjustmentMinute(date?: Date, overrideTimezoneOffset?: number): number {\n        if (!date || date.getTime() < 0) {\n            // Javascript date timezone calculation got effect when the time epoch < 0\n            // e.g. new Date('Tue Feb 02 1300 00:00:00 GMT+0900 (JST)') => Tue Feb 02 1300 00:18:59 GMT+0918 (JST)\n            date = new Date();\n        }\n\n        const currentTimezoneOffset = -date.getTimezoneOffset();\n        const targetTimezoneOffset = overrideTimezoneOffset ?? this.timezoneOffset ?? currentTimezoneOffset;\n        return currentTimezoneOffset - targetTimezoneOffset;\n    }\n}\n\nexport class ParsingComponents implements ParsedComponents {\n    private knownValues: { [c in Component]?: number };\n    private impliedValues: { [c in Component]?: number };\n    private reference: ReferenceWithTimezone;\n    private _tags = new Set<string>();\n\n    constructor(reference: ReferenceWithTimezone, knownComponents?: { [c in Component]?: number }) {\n        this.reference = reference;\n        this.knownValues = {};\n        this.impliedValues = {};\n        if (knownComponents) {\n            for (const key in knownComponents) {\n                this.knownValues[key as Component] = knownComponents[key as Component];\n            }\n        }\n\n        const refDayJs = dayjs(reference.instant);\n        this.imply(\"day\", refDayJs.date());\n        this.imply(\"month\", refDayJs.month() + 1);\n        this.imply(\"year\", refDayJs.year());\n        this.imply(\"hour\", 12);\n        this.imply(\"minute\", 0);\n        this.imply(\"second\", 0);\n        this.imply(\"millisecond\", 0);\n    }\n\n    get(component: Component): number | null {\n        if (component in this.knownValues) {\n            return this.knownValues[component];\n        }\n\n        if (component in this.impliedValues) {\n            return this.impliedValues[component];\n        }\n\n        return null;\n    }\n\n    isCertain(component: Component): boolean {\n        return component in this.knownValues;\n    }\n\n    getCertainComponents(): Array<Component> {\n        return Object.keys(this.knownValues) as Array<Component>;\n    }\n\n    imply(component: Component, value: number): ParsingComponents {\n        if (component in this.knownValues) {\n            return this;\n        }\n        this.impliedValues[component] = value;\n        return this;\n    }\n\n    assign(component: Component, value: number): ParsingComponents {\n        this.knownValues[component] = value;\n        delete this.impliedValues[component];\n        return this;\n    }\n\n    delete(component: Component) {\n        delete this.knownValues[component];\n        delete this.impliedValues[component];\n    }\n\n    clone(): ParsingComponents {\n        const component = new ParsingComponents(this.reference);\n        component.knownValues = {};\n        component.impliedValues = {};\n\n        for (const key in this.knownValues) {\n            component.knownValues[key as Component] = this.knownValues[key as Component];\n        }\n\n        for (const key in this.impliedValues) {\n            component.impliedValues[key as Component] = this.impliedValues[key as Component];\n        }\n\n        return component;\n    }\n\n    isOnlyDate(): boolean {\n        return !this.isCertain(\"hour\") && !this.isCertain(\"minute\") && !this.isCertain(\"second\");\n    }\n\n    isOnlyTime(): boolean {\n        return !this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n    }\n\n    isOnlyWeekdayComponent(): boolean {\n        return this.isCertain(\"weekday\") && !this.isCertain(\"day\") && !this.isCertain(\"month\");\n    }\n\n    isDateWithUnknownYear(): boolean {\n        return this.isCertain(\"month\") && !this.isCertain(\"year\");\n    }\n\n    isValidDate(): boolean {\n        const date = this.dateWithoutTimezoneAdjustment();\n\n        if (date.getFullYear() !== this.get(\"year\")) return false;\n        if (date.getMonth() !== this.get(\"month\") - 1) return false;\n        if (date.getDate() !== this.get(\"day\")) return false;\n        if (this.get(\"hour\") != null && date.getHours() != this.get(\"hour\")) return false;\n        if (this.get(\"minute\") != null && date.getMinutes() != this.get(\"minute\")) return false;\n\n        return true;\n    }\n\n    toString() {\n        return `[ParsingComponents {\n            tags: ${JSON.stringify(Array.from(this._tags).sort())}, \n            knownValues: ${JSON.stringify(this.knownValues)}, \n            impliedValues: ${JSON.stringify(this.impliedValues)}}, \n            reference: ${JSON.stringify(this.reference)}]`;\n    }\n\n    dayjs() {\n        return dayjs(this.date());\n    }\n\n    date(): Date {\n        const date = this.dateWithoutTimezoneAdjustment();\n        const timezoneAdjustment = this.reference.getSystemTimezoneAdjustmentMinute(date, this.get(\"timezoneOffset\"));\n        return new Date(date.getTime() + timezoneAdjustment * 60000);\n    }\n\n    addTag(tag: string): ParsingComponents {\n        this._tags.add(tag);\n        return this;\n    }\n\n    addTags(tags: string[] | Set<string>): ParsingComponents {\n        for (const tag of tags) {\n            this._tags.add(tag);\n        }\n        return this;\n    }\n\n    tags(): Set<string> {\n        return new Set(this._tags);\n    }\n\n    private dateWithoutTimezoneAdjustment() {\n        const date = new Date(\n            this.get(\"year\"),\n            this.get(\"month\") - 1,\n            this.get(\"day\"),\n            this.get(\"hour\"),\n            this.get(\"minute\"),\n            this.get(\"second\"),\n            this.get(\"millisecond\")\n        );\n\n        date.setFullYear(this.get(\"year\"));\n        return date;\n    }\n\n    static createRelativeFromReference(\n        reference: ReferenceWithTimezone,\n        fragments: { [c in QUnitType]?: number }\n    ): ParsingComponents {\n        let date = dayjs(reference.instant);\n        for (const key in fragments) {\n            date = date.add(fragments[key as QUnitType], key as QUnitType);\n        }\n\n        const components = new ParsingComponents(reference);\n        if (fragments[\"hour\"] || fragments[\"minute\"] || fragments[\"second\"]) {\n            assignSimilarTime(components, date);\n            assignSimilarDate(components, date);\n            if (reference.timezoneOffset !== null) {\n                components.assign(\"timezoneOffset\", -reference.instant.getTimezoneOffset());\n            }\n        } else {\n            implySimilarTime(components, date);\n            if (reference.timezoneOffset !== null) {\n                components.imply(\"timezoneOffset\", -reference.instant.getTimezoneOffset());\n            }\n\n            if (fragments[\"d\"]) {\n                components.assign(\"day\", date.date());\n                components.assign(\"month\", date.month() + 1);\n                components.assign(\"year\", date.year());\n            } else {\n                if (fragments[\"week\"]) {\n                    components.imply(\"weekday\", date.day());\n                }\n\n                components.imply(\"day\", date.date());\n                if (fragments[\"month\"]) {\n                    components.assign(\"month\", date.month() + 1);\n                    components.assign(\"year\", date.year());\n                } else {\n                    components.imply(\"month\", date.month() + 1);\n                    if (fragments[\"year\"]) {\n                        components.assign(\"year\", date.year());\n                    } else {\n                        components.imply(\"year\", date.year());\n                    }\n                }\n            }\n        }\n\n        return components;\n    }\n}\n\nexport class ParsingResult implements ParsedResult {\n    refDate: Date;\n    index: number;\n    text: string;\n\n    reference: ReferenceWithTimezone;\n\n    start: ParsingComponents;\n    end?: ParsingComponents;\n\n    constructor(\n        reference: ReferenceWithTimezone,\n        index: number,\n        text: string,\n        start?: ParsingComponents,\n        end?: ParsingComponents\n    ) {\n        this.reference = reference;\n        this.refDate = reference.instant;\n        this.index = index;\n        this.text = text;\n        this.start = start || new ParsingComponents(reference);\n        this.end = end;\n    }\n\n    clone() {\n        const result = new ParsingResult(this.reference, this.index, this.text);\n        result.start = this.start ? this.start.clone() : null;\n        result.end = this.end ? this.end.clone() : null;\n        return result;\n    }\n\n    date(): Date {\n        return this.start.date();\n    }\n\n    tags(): Set<string> {\n        const combinedTags: Set<string> = new Set(this.start.tags());\n        if (this.end) {\n            for (const tag of this.end.tags()) {\n                combinedTags.add(tag);\n            }\n        }\n        return combinedTags;\n    }\n\n    toString() {\n        const tags = Array.from(this.tags()).sort();\n        return `[ParsingResult {index: ${this.index}, text: '${this.text}', tags: ${JSON.stringify(tags)} ...}]`;\n    }\n}\n", "import { DebugConsume, DebugHandler } from \"./debugging\";\n\nexport interface ParsingOption {\n    /**\n     * To parse only forward dates (the results should be after the reference date).\n     * This effects date/time implication (e.g. weekday or time mentioning)\n     */\n    forwardDate?: boolean;\n\n    /**\n     * Additional timezone keywords for the parsers to recognize.\n     * Any value provided will override the default handling of that value.\n     */\n    timezones?: TimezoneAbbrMap;\n\n    /**\n     * Internal debug event handler.\n     * @internal\n     */\n    debug?: DebugHandler | DebugConsume;\n}\n\n/**\n * Some timezone abbreviations are ambiguous in that they refer to different offsets\n * depending on the time of year \u2014 daylight savings time (DST), or non-DST. This interface\n * allows defining such timezones\n */\nexport interface AmbiguousTimezoneMap {\n    timezoneOffsetDuringDst: number;\n    timezoneOffsetNonDst: number;\n    /**\n     * Return the start date of DST for the given year.\n     * timezone.ts contains helper methods for common such rules.\n     */\n    dstStart: (year: number) => Date;\n    /**\n     * Return the end date of DST for the given year.\n     * timezone.ts contains helper methods for common such rules.\n     */\n    dstEnd: (year: number) => Date;\n}\n\n/**\n * A map describing how timezone abbreviations should map to time offsets.\n * Supports both unambigous mappings abbreviation => offset,\n * and ambiguous mappings, where the offset will depend on whether the\n * time in question is during daylight savings time or not.\n */\nexport type TimezoneAbbrMap = { [key: string]: number | AmbiguousTimezoneMap };\n\nexport interface ParsingReference {\n    /**\n     * Reference date. The instant (JavaScript Date object) when the input is written or mention.\n     * This effect date/time implication (e.g. weekday or time mentioning).\n     * (default = now)\n     */\n    instant?: Date;\n\n    /**\n     * Reference timezone. The timezone where the input is written or mention.\n     * Date/time implication will account the difference between input timezone and the current system timezone.\n     * (default = current timezone)\n     */\n    timezone?: string | number;\n}\n\n/**\n * Parsed result or final output.\n * Each result object represents a date/time (or date/time-range) mentioning in the input.\n */\nexport interface ParsedResult {\n    readonly refDate: Date;\n    readonly index: number;\n    readonly text: string;\n\n    readonly start: ParsedComponents;\n    readonly end?: ParsedComponents;\n\n    /**\n     * @return a javascript date object created from the `result.start`.\n     */\n    date(): Date;\n\n    /**\n     * @return debugging tags combined of the `result.start` and `result.end`.\n     */\n    tags(): Set<string>;\n}\n\n/**\n * A collection of parsed date/time components (e.g. day, hour, minute, ..., etc).\n *\n * Each parsed component has three different levels of certainty.\n * - *Certain* (or *Known*): The component is directly mentioned and parsed.\n * - *Implied*: The component is not directly mentioned, but implied by other parsed information.\n * - *Unknown*: Completely no mention of the component.\n */\nexport interface ParsedComponents {\n    /**\n     * Check the component certainly if the component is *Certain* (or *Known*)\n     */\n    isCertain(component: Component): boolean;\n\n    /**\n     * Get the component value for either *Certain* or *Implied* value.\n     */\n    get(component: Component): number | null;\n\n    /**\n     * @return a javascript date object.\n     */\n    date(): Date;\n\n    /**\n     * @return debugging tags of the parsed component.\n     */\n    tags(): Set<string>;\n}\n\nexport type Component =\n    | \"year\"\n    | \"month\"\n    | \"day\"\n    | \"weekday\"\n    | \"hour\"\n    | \"minute\"\n    | \"second\"\n    | \"millisecond\"\n    | \"meridiem\"\n    | \"timezoneOffset\";\n\nexport enum Meridiem {\n    AM = 0,\n    PM = 1,\n}\n\nexport enum Weekday {\n    SUNDAY = 0,\n    MONDAY = 1,\n    TUESDAY = 2,\n    WEDNESDAY = 3,\n    THURSDAY = 4,\n    FRIDAY = 5,\n    SATURDAY = 6,\n}\n\nexport enum Month {\n    JANUARY = 1,\n    FEBRUARY = 2,\n    MARCH = 3,\n    APRIL = 4,\n    MAY = 5,\n    JUNE = 6,\n    JULY = 7,\n    AUGUST = 8,\n    SEPTEMBER = 9,\n    OCTOBER = 10,\n    NOVEMBER = 11,\n    DECEMBER = 12,\n}\n", "import { ParsingComponents } from \"../results\";\nimport dayjs from \"dayjs\";\nimport { Meridiem } from \"../types\";\n\nexport function assignTheNextDay(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    targetDayJs = targetDayJs.add(1, \"day\");\n    assignSimilarDate(component, targetDayJs);\n    implySimilarTime(component, targetDayJs);\n}\n\nexport function implyTheNextDay(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    targetDayJs = targetDayJs.add(1, \"day\");\n    implySimilarDate(component, targetDayJs);\n    implySimilarTime(component, targetDayJs);\n}\n\nexport function assignSimilarDate(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.assign(\"day\", targetDayJs.date());\n    component.assign(\"month\", targetDayJs.month() + 1);\n    component.assign(\"year\", targetDayJs.year());\n}\n\nexport function assignSimilarTime(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.assign(\"hour\", targetDayJs.hour());\n    component.assign(\"minute\", targetDayJs.minute());\n    component.assign(\"second\", targetDayJs.second());\n    component.assign(\"millisecond\", targetDayJs.millisecond());\n    if (component.get(\"hour\") < 12) {\n        component.assign(\"meridiem\", Meridiem.AM);\n    } else {\n        component.assign(\"meridiem\", Meridiem.PM);\n    }\n}\n\nexport function implySimilarDate(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.imply(\"day\", targetDayJs.date());\n    component.imply(\"month\", targetDayJs.month() + 1);\n    component.imply(\"year\", targetDayJs.year());\n}\n\nexport function implySimilarTime(component: ParsingComponents, targetDayJs: dayjs.Dayjs) {\n    component.imply(\"hour\", targetDayJs.hour());\n    component.imply(\"minute\", targetDayJs.minute());\n    component.imply(\"second\", targetDayJs.second());\n    component.imply(\"millisecond\", targetDayJs.millisecond());\n}\n", "import dayjs from \"dayjs\";\nimport { TimezoneAbbrMap, Weekday, Month } from \"./types\";\n\nexport const TIMEZONE_ABBR_MAP: TimezoneAbbrMap = {\n    ACDT: 630,\n    ACST: 570,\n    ADT: -180,\n    AEDT: 660,\n    AEST: 600,\n    AFT: 270,\n    AKDT: -480,\n    AKST: -540,\n    ALMT: 360,\n    AMST: -180,\n    AMT: -240,\n    ANAST: 720,\n    ANAT: 720,\n    AQTT: 300,\n    ART: -180,\n    AST: -240,\n    AWDT: 540,\n    AWST: 480,\n    AZOST: 0,\n    AZOT: -60,\n    AZST: 300,\n    AZT: 240,\n    BNT: 480,\n    BOT: -240,\n    BRST: -120,\n    BRT: -180,\n    BST: 60,\n    BTT: 360,\n    CAST: 480,\n    CAT: 120,\n    CCT: 390,\n    CDT: -300,\n    CEST: 120,\n    // Note: Many sources define CET as a constant UTC+1. In common usage, however,\n    // CET usually refers to the time observed in most of Europe, be it standard time or daylight saving time.\n    CET: {\n        timezoneOffsetDuringDst: 2 * 60,\n        timezoneOffsetNonDst: 60,\n        dstStart: (year: number) => getLastWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2),\n        dstEnd: (year: number) => getLastWeekdayOfMonth(year, Month.OCTOBER, Weekday.SUNDAY, 3),\n    },\n    CHADT: 825,\n    CHAST: 765,\n    CKT: -600,\n    CLST: -180,\n    CLT: -240,\n    COT: -300,\n    CST: -360,\n    CT: {\n        timezoneOffsetDuringDst: -5 * 60,\n        timezoneOffsetNonDst: -6 * 60,\n        dstStart: (year: number) => getNthWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2, 2),\n        dstEnd: (year: number) => getNthWeekdayOfMonth(year, Month.NOVEMBER, Weekday.SUNDAY, 1, 2),\n    },\n    CVT: -60,\n    CXT: 420,\n    ChST: 600,\n    DAVT: 420,\n    EASST: -300,\n    EAST: -360,\n    EAT: 180,\n    ECT: -300,\n    EDT: -240,\n    EEST: 180,\n    EET: 120,\n    EGST: 0,\n    EGT: -60,\n    EST: -300,\n    ET: {\n        timezoneOffsetDuringDst: -4 * 60,\n        timezoneOffsetNonDst: -5 * 60,\n        dstStart: (year: number) => getNthWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2, 2),\n        dstEnd: (year: number) => getNthWeekdayOfMonth(year, Month.NOVEMBER, Weekday.SUNDAY, 1, 2),\n    },\n    FJST: 780,\n    FJT: 720,\n    FKST: -180,\n    FKT: -240,\n    FNT: -120,\n    GALT: -360,\n    GAMT: -540,\n    GET: 240,\n    GFT: -180,\n    GILT: 720,\n    GMT: 0,\n    GST: 240,\n    GYT: -240,\n    HAA: -180,\n    HAC: -300,\n    HADT: -540,\n    HAE: -240,\n    HAP: -420,\n    HAR: -360,\n    HAST: -600,\n    HAT: -90,\n    HAY: -480,\n    HKT: 480,\n    HLV: -210,\n    HNA: -240,\n    HNC: -360,\n    HNE: -300,\n    HNP: -480,\n    HNR: -420,\n    HNT: -150,\n    HNY: -540,\n    HOVT: 420,\n    ICT: 420,\n    IDT: 180,\n    IOT: 360,\n    IRDT: 270,\n    IRKST: 540,\n    IRKT: 540,\n    IRST: 210,\n    IST: 330,\n    JST: 540,\n    KGT: 360,\n    KRAST: 480,\n    KRAT: 480,\n    KST: 540,\n    KUYT: 240,\n    LHDT: 660,\n    LHST: 630,\n    LINT: 840,\n    MAGST: 720,\n    MAGT: 720,\n    MART: -510,\n    MAWT: 300,\n    MDT: -360,\n    MESZ: 120,\n    MEZ: 60,\n    MHT: 720,\n    MMT: 390,\n    MSD: 240,\n    MSK: 180,\n    MST: -420,\n    MT: {\n        timezoneOffsetDuringDst: -6 * 60,\n        timezoneOffsetNonDst: -7 * 60,\n        dstStart: (year: number) => getNthWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2, 2),\n        dstEnd: (year: number) => getNthWeekdayOfMonth(year, Month.NOVEMBER, Weekday.SUNDAY, 1, 2),\n    },\n    MUT: 240,\n    MVT: 300,\n    MYT: 480,\n    NCT: 660,\n    NDT: -90,\n    NFT: 690,\n    NOVST: 420,\n    NOVT: 360,\n    NPT: 345,\n    NST: -150,\n    NUT: -660,\n    NZDT: 780,\n    NZST: 720,\n    OMSST: 420,\n    OMST: 420,\n    PDT: -420,\n    PET: -300,\n    PETST: 720,\n    PETT: 720,\n    PGT: 600,\n    PHOT: 780,\n    PHT: 480,\n    PKT: 300,\n    PMDT: -120,\n    PMST: -180,\n    PONT: 660,\n    PST: -480,\n    PT: {\n        timezoneOffsetDuringDst: -7 * 60,\n        timezoneOffsetNonDst: -8 * 60,\n        dstStart: (year: number) => getNthWeekdayOfMonth(year, Month.MARCH, Weekday.SUNDAY, 2, 2),\n        dstEnd: (year: number) => getNthWeekdayOfMonth(year, Month.NOVEMBER, Weekday.SUNDAY, 1, 2),\n    },\n    PWT: 540,\n    PYST: -180,\n    PYT: -240,\n    RET: 240,\n    SAMT: 240,\n    SAST: 120,\n    SBT: 660,\n    SCT: 240,\n    SGT: 480,\n    SRT: -180,\n    SST: -660,\n    TAHT: -600,\n    TFT: 300,\n    TJT: 300,\n    TKT: 780,\n    TLT: 540,\n    TMT: 300,\n    TVT: 720,\n    ULAT: 480,\n    UTC: 0,\n    UYST: -120,\n    UYT: -180,\n    UZT: 300,\n    VET: -210,\n    VLAST: 660,\n    VLAT: 660,\n    VUT: 660,\n    WAST: 120,\n    WAT: 60,\n    WEST: 60,\n    WESZ: 60,\n    WET: 0,\n    WEZ: 0,\n    WFT: 720,\n    WGST: -120,\n    WGT: -180,\n    WIB: 420,\n    WIT: 540,\n    WITA: 480,\n    WST: 780,\n    WT: 0,\n    YAKST: 600,\n    YAKT: 600,\n    YAPT: 600,\n    YEKST: 360,\n    YEKT: 360,\n};\n\n/**\n * Get the date which is the nth occurence of a given weekday in a given month and year.\n *\n * @param year The year for which to find the date\n * @param month The month in which the date occurs\n * @param weekday The weekday on which the date occurs\n * @param n The nth occurence of the given weekday on the month to return\n * @param hour The hour of day which should be set on the returned date\n * @return The date which is the nth occurence of a given weekday in a given\n *         month and year, at the given hour of day\n */\nexport function getNthWeekdayOfMonth(year: number, month: Month, weekday: Weekday, n: 1 | 2 | 3 | 4, hour = 0): Date {\n    let dayOfMonth = 0;\n    let i = 0;\n    while (i < n) {\n        dayOfMonth++;\n        const date = new Date(year, month - 1, dayOfMonth);\n        if (date.getDay() === weekday) i++;\n    }\n    return new Date(year, month - 1, dayOfMonth, hour);\n}\n\n/**\n * Get the date which is the last occurence of a given weekday in a given month and year.\n *\n * @param year The year for which to find the date\n * @param month The month in which the date occurs\n * @param weekday The weekday on which the date occurs\n * @param hour The hour of day which should be set on the returned date\n * @return The date which is the last occurence of a given weekday in a given\n *         month and year, at the given hour of day\n */\nexport function getLastWeekdayOfMonth(year: number, month: Month, weekday: Weekday, hour = 0): Date {\n    // Procedure: Find the first weekday of the next month, compare with the given weekday,\n    // and use the difference to determine how many days to subtract from the first of the next month.\n    const oneIndexedWeekday = weekday === 0 ? 7 : weekday;\n    const date = new Date(year, month - 1 + 1, 1, 12);\n    const firstWeekdayNextMonth = date.getDay() === 0 ? 7 : date.getDay();\n    let dayDiff;\n    if (firstWeekdayNextMonth === oneIndexedWeekday) dayDiff = 7;\n    else if (firstWeekdayNextMonth < oneIndexedWeekday) dayDiff = 7 + firstWeekdayNextMonth - oneIndexedWeekday;\n    else dayDiff = firstWeekdayNextMonth - oneIndexedWeekday;\n    date.setDate(date.getDate() - dayDiff);\n    return new Date(year, month - 1, date.getDate(), hour);\n}\n\n/**\n * Finds and returns timezone offset. If timezoneInput is numeric, it is returned. Otherwise, look for timezone offsets\n * in the following order: timezoneOverrides -> {@link TIMEZONE_ABBR_MAP}.\n *\n * @param timezoneInput Uppercase timezone abbreviation or numeric offset in minutes\n * @param date The date to use to determine whether to return DST offsets for ambiguous timezones\n * @param timezoneOverrides Overrides for timezones\n * @return timezone offset in minutes\n */\nexport function toTimezoneOffset(\n    timezoneInput?: string | number,\n    date?: Date,\n    timezoneOverrides: TimezoneAbbrMap = {}\n): number | null {\n    if (timezoneInput == null) {\n        return null;\n    }\n\n    if (typeof timezoneInput === \"number\") {\n        return timezoneInput;\n    }\n\n    const matchedTimezone = timezoneOverrides[timezoneInput] ?? TIMEZONE_ABBR_MAP[timezoneInput];\n    if (matchedTimezone == null) {\n        return null;\n    }\n    // This means that we have matched an unambiguous timezone\n    if (typeof matchedTimezone == \"number\") {\n        return matchedTimezone;\n    }\n\n    // The matched timezone is an ambiguous timezone, where the offset depends on whether the context (refDate)\n    // is during daylight savings or not.\n\n    // Without refDate as context, there's no way to know if DST or non-DST offset should be used. Return null instead.\n    if (date == null) {\n        return null;\n    }\n\n    // Return DST offset if the refDate is during daylight savings\n    if (\n        dayjs(date).isAfter(matchedTimezone.dstStart(date.getFullYear())) &&\n        !dayjs(date).isAfter(matchedTimezone.dstEnd(date.getFullYear()))\n    ) {\n        return matchedTimezone.timezoneOffsetDuringDst;\n    }\n\n    // refDate is not during DST => return non-DST offset\n    return matchedTimezone.timezoneOffsetNonDst;\n}\n", "type DictionaryLike = string[] | { [word: string]: unknown } | Map<string, unknown>;\n\nexport function repeatedTimeunitPattern(\n    prefix: string,\n    singleTimeunitPattern: string,\n    connectorPattern = \"\\\\s{0,5},?\\\\s{0,5}\"\n): string {\n    const singleTimeunitPatternNoCapture = singleTimeunitPattern.replace(/\\((?!\\?)/g, \"(?:\");\n    return `${prefix}${singleTimeunitPatternNoCapture}(?:${connectorPattern}${singleTimeunitPatternNoCapture}){0,10}`;\n}\n\nexport function extractTerms(dictionary: DictionaryLike): string[] {\n    let keys: string[];\n    if (dictionary instanceof Array) {\n        keys = [...dictionary];\n    } else if (dictionary instanceof Map) {\n        keys = Array.from((dictionary as Map<string, unknown>).keys());\n    } else {\n        keys = Object.keys(dictionary);\n    }\n\n    return keys;\n}\n\nexport function matchAnyPattern(dictionary: DictionaryLike): string {\n    // TODO: More efficient regex pattern by considering duplicated prefix\n\n    const joinedTerms = extractTerms(dictionary)\n        .sort((a, b) => b.length - a.length)\n        .join(\"|\")\n        .replace(/\\./g, \"\\\\.\");\n\n    return `(?:${joinedTerms})`;\n}\n", "import dayjs from \"dayjs\";\n\n/**\n * Find the most likely year, from a raw number. For example:\n * 1997 => 1997\n * 97 => 1997\n * 12 => 2012\n */\nexport function findMostLikelyADYear(yearNumber: number): number {\n    if (yearNumber < 100) {\n        if (yearNumber > 50) {\n            yearNumber = yearNumber + 1900;\n        } else {\n            yearNumber = yearNumber + 2000;\n        }\n    }\n\n    return yearNumber;\n}\n\nexport function findYearClosestToRef(refDate: Date, day: number, month: number): number {\n    //Find the most appropriated year\n    const refMoment = dayjs(refDate);\n    let dateMoment = refMoment;\n    dateMoment = dateMoment.month(month - 1);\n    dateMoment = dateMoment.date(day);\n    dateMoment = dateMoment.year(refMoment.year());\n\n    const nextYear = dateMoment.add(1, \"y\");\n    const lastYear = dateMoment.add(-1, \"y\");\n    if (Math.abs(nextYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n        dateMoment = nextYear;\n    } else if (Math.abs(lastYear.diff(refMoment)) < Math.abs(dateMoment.diff(refMoment))) {\n        dateMoment = lastYear;\n    }\n\n    return dateMoment.year();\n}\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { matchAnyPattern, repeatedTimeunitPattern } from \"../../utils/pattern\";\nimport { findMostLikelyADYear } from \"../../calculation/years\";\nimport { TimeUnits } from \"../../utils/timeunits\";\nimport { Weekday } from \"../../types\";\n\nexport const WEEKDAY_DICTIONARY: { [word: string]: Weekday } = {\n    sunday: 0,\n    sun: 0,\n    \"sun.\": 0,\n    monday: 1,\n    mon: 1,\n    \"mon.\": 1,\n    tuesday: 2,\n    tue: 2,\n    \"tue.\": 2,\n    wednesday: 3,\n    wed: 3,\n    \"wed.\": 3,\n    thursday: 4,\n    thurs: 4,\n    \"thurs.\": 4,\n    thur: 4,\n    \"thur.\": 4,\n    thu: 4,\n    \"thu.\": 4,\n    friday: 5,\n    fri: 5,\n    \"fri.\": 5,\n    saturday: 6,\n    sat: 6,\n    \"sat.\": 6,\n};\n\nexport const FULL_MONTH_NAME_DICTIONARY: { [word: string]: number } = {\n    january: 1,\n    february: 2,\n    march: 3,\n    april: 4,\n    may: 5,\n    june: 6,\n    july: 7,\n    august: 8,\n    september: 9,\n    october: 10,\n    november: 11,\n    december: 12,\n};\n\nexport const MONTH_DICTIONARY: { [word: string]: number } = {\n    ...FULL_MONTH_NAME_DICTIONARY,\n    jan: 1,\n    \"jan.\": 1,\n    feb: 2,\n    \"feb.\": 2,\n    mar: 3,\n    \"mar.\": 3,\n    apr: 4,\n    \"apr.\": 4,\n    jun: 6,\n    \"jun.\": 6,\n    jul: 7,\n    \"jul.\": 7,\n    aug: 8,\n    \"aug.\": 8,\n    sep: 9,\n    \"sep.\": 9,\n    sept: 9,\n    \"sept.\": 9,\n    oct: 10,\n    \"oct.\": 10,\n    nov: 11,\n    \"nov.\": 11,\n    dec: 12,\n    \"dec.\": 12,\n};\n\nexport const INTEGER_WORD_DICTIONARY: { [word: string]: number } = {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n    ten: 10,\n    eleven: 11,\n    twelve: 12,\n};\n\nexport const ORDINAL_WORD_DICTIONARY: { [word: string]: number } = {\n    first: 1,\n    second: 2,\n    third: 3,\n    fourth: 4,\n    fifth: 5,\n    sixth: 6,\n    seventh: 7,\n    eighth: 8,\n    ninth: 9,\n    tenth: 10,\n    eleventh: 11,\n    twelfth: 12,\n    thirteenth: 13,\n    fourteenth: 14,\n    fifteenth: 15,\n    sixteenth: 16,\n    seventeenth: 17,\n    eighteenth: 18,\n    nineteenth: 19,\n    twentieth: 20,\n    \"twenty first\": 21,\n    \"twenty-first\": 21,\n    \"twenty second\": 22,\n    \"twenty-second\": 22,\n    \"twenty third\": 23,\n    \"twenty-third\": 23,\n    \"twenty fourth\": 24,\n    \"twenty-fourth\": 24,\n    \"twenty fifth\": 25,\n    \"twenty-fifth\": 25,\n    \"twenty sixth\": 26,\n    \"twenty-sixth\": 26,\n    \"twenty seventh\": 27,\n    \"twenty-seventh\": 27,\n    \"twenty eighth\": 28,\n    \"twenty-eighth\": 28,\n    \"twenty ninth\": 29,\n    \"twenty-ninth\": 29,\n    \"thirtieth\": 30,\n    \"thirty first\": 31,\n    \"thirty-first\": 31,\n};\n\nexport const TIME_UNIT_DICTIONARY_NO_ABBR: { [word: string]: OpUnitType | QUnitType } = {\n    second: \"second\",\n    seconds: \"second\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    hour: \"hour\",\n    hours: \"hour\",\n    day: \"d\",\n    days: \"d\",\n    week: \"week\",\n    weeks: \"week\",\n    month: \"month\",\n    months: \"month\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    year: \"year\",\n    years: \"year\",\n};\n\nexport const TIME_UNIT_DICTIONARY: { [word: string]: OpUnitType | QUnitType } = {\n    s: \"second\",\n    sec: \"second\",\n    second: \"second\",\n    seconds: \"second\",\n    m: \"minute\",\n    min: \"minute\",\n    mins: \"minute\",\n    minute: \"minute\",\n    minutes: \"minute\",\n    h: \"hour\",\n    hr: \"hour\",\n    hrs: \"hour\",\n    hour: \"hour\",\n    hours: \"hour\",\n    d: \"d\",\n    day: \"d\",\n    days: \"d\",\n    w: \"w\",\n    week: \"week\",\n    weeks: \"week\",\n    mo: \"month\",\n    mon: \"month\",\n    mos: \"month\",\n    month: \"month\",\n    months: \"month\",\n    qtr: \"quarter\",\n    quarter: \"quarter\",\n    quarters: \"quarter\",\n    y: \"year\",\n    yr: \"year\",\n    year: \"year\",\n    years: \"year\",\n    // Also, merge the entries from the full-name dictionary.\n    // We leave the duplicated entries for readability.\n    ...TIME_UNIT_DICTIONARY_NO_ABBR,\n};\n\n//-----------------------------\n\nexport const NUMBER_PATTERN = `(?:${matchAnyPattern(\n    INTEGER_WORD_DICTIONARY\n)}|[0-9]+|[0-9]+\\\\.[0-9]+|half(?:\\\\s{0,2}an?)?|an?\\\\b(?:\\\\s{0,2}few)?|few|several|the|a?\\\\s{0,2}couple\\\\s{0,2}(?:of)?)`;\n\nexport function parseNumberPattern(match: string): number {\n    const num = match.toLowerCase();\n    if (INTEGER_WORD_DICTIONARY[num] !== undefined) {\n        return INTEGER_WORD_DICTIONARY[num];\n    } else if (num === \"a\" || num === \"an\" || num == \"the\") {\n        return 1;\n    } else if (num.match(/few/)) {\n        return 3;\n    } else if (num.match(/half/)) {\n        return 0.5;\n    } else if (num.match(/couple/)) {\n        return 2;\n    } else if (num.match(/several/)) {\n        return 7;\n    }\n\n    return parseFloat(num);\n}\n\n//-----------------------------\n\nexport const ORDINAL_NUMBER_PATTERN = `(?:${matchAnyPattern(ORDINAL_WORD_DICTIONARY)}|[0-9]{1,2}(?:st|nd|rd|th)?)`;\nexport function parseOrdinalNumberPattern(match: string): number {\n    let num = match.toLowerCase();\n    if (ORDINAL_WORD_DICTIONARY[num] !== undefined) {\n        return ORDINAL_WORD_DICTIONARY[num];\n    }\n\n    num = num.replace(/(?:st|nd|rd|th)$/i, \"\");\n    return parseInt(num);\n}\n\n//-----------------------------\n\nexport const YEAR_PATTERN = `(?:[1-9][0-9]{0,3}\\\\s{0,2}(?:BE|AD|BC|BCE|CE)|[1-2][0-9]{3}|[5-9][0-9]|2[0-5])`;\nexport function parseYear(match: string): number {\n    if (/BE/i.test(match)) {\n        // Buddhist Era\n        match = match.replace(/BE/i, \"\");\n        return parseInt(match) - 543;\n    }\n\n    if (/BCE?/i.test(match)) {\n        // Before Christ, Before Common Era\n        match = match.replace(/BCE?/i, \"\");\n        return -parseInt(match);\n    }\n\n    if (/(AD|CE)/i.test(match)) {\n        // Anno Domini, Common Era\n        match = match.replace(/(AD|CE)/i, \"\");\n        return parseInt(match);\n    }\n\n    const rawYearNumber = parseInt(match);\n    return findMostLikelyADYear(rawYearNumber);\n}\n\n//-----------------------------\n\nconst SINGLE_TIME_UNIT_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(TIME_UNIT_DICTIONARY)})`;\nconst SINGLE_TIME_UNIT_REGEX = new RegExp(SINGLE_TIME_UNIT_PATTERN, \"i\");\n\nconst SINGLE_TIME_UNIT_NO_ABBR_PATTERN = `(${NUMBER_PATTERN})\\\\s{0,3}(${matchAnyPattern(\n    TIME_UNIT_DICTIONARY_NO_ABBR\n)})`;\n\nconst TIME_UNIT_CONNECTOR_PATTERN = `\\\\s{0,5},?(?:\\\\s*and)?\\\\s{0,5}`;\n\nexport const TIME_UNITS_PATTERN = repeatedTimeunitPattern(\n    `(?:(?:about|around)\\\\s{0,3})?`,\n    SINGLE_TIME_UNIT_PATTERN,\n    TIME_UNIT_CONNECTOR_PATTERN\n);\nexport const TIME_UNITS_NO_ABBR_PATTERN = repeatedTimeunitPattern(\n    `(?:(?:about|around)\\\\s{0,3})?`,\n    SINGLE_TIME_UNIT_NO_ABBR_PATTERN,\n    TIME_UNIT_CONNECTOR_PATTERN\n);\n\nexport function parseTimeUnits(timeunitText): TimeUnits {\n    const fragments = {};\n    let remainingText = timeunitText;\n    let match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    while (match) {\n        collectDateTimeFragment(fragments, match);\n        remainingText = remainingText.substring(match[0].length).trim();\n        match = SINGLE_TIME_UNIT_REGEX.exec(remainingText);\n    }\n    return fragments;\n}\n\nfunction collectDateTimeFragment(fragments, match) {\n    const num = parseNumberPattern(match[1]);\n    const unit = TIME_UNIT_DICTIONARY[match[2].toLowerCase()];\n    fragments[unit] = num;\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../results\";\nimport { Component } from \"../../types\";\n\n/**\n * A parser that checks for word boundary and applying the inner pattern and extraction.\n */\nexport abstract class AbstractParserWithWordBoundaryChecking implements Parser {\n    abstract innerPattern(context: ParsingContext): RegExp;\n    abstract innerExtract(\n        context: ParsingContext,\n        match: RegExpMatchArray\n    ): ParsingComponents | ParsingResult | { [c in Component]?: number } | null;\n\n    // Overrides this method if there is more efficient way to check for inner pattern change.\n    innerPatternHasChange(context: ParsingContext, currentInnerPattern: RegExp): boolean {\n        return this.innerPattern(context) !== currentInnerPattern;\n    }\n\n    patternLeftBoundary(): string {\n        return `(\\\\W|^)`;\n    }\n\n    private cachedInnerPattern?: RegExp = null;\n    private cachedPattern?: RegExp = null;\n\n    pattern(context: ParsingContext): RegExp {\n        if (this.cachedInnerPattern) {\n            if (!this.innerPatternHasChange(context, this.cachedInnerPattern)) {\n                return this.cachedPattern;\n            }\n        }\n        this.cachedInnerPattern = this.innerPattern(context);\n        this.cachedPattern = new RegExp(\n            `${this.patternLeftBoundary()}${this.cachedInnerPattern.source}`,\n            this.cachedInnerPattern.flags\n        );\n        return this.cachedPattern;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray) {\n        const header = match[1] ?? \"\";\n        match.index = match.index + header.length;\n        match[0] = match[0].substring(header.length);\n        for (let i = 2; i < match.length; i++) {\n            match[i - 1] = match[i];\n        }\n\n        return this.innerExtract(context, match);\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN_WITH_OPTIONAL_PREFIX = new RegExp(\n    `(?:(?:within|in|for)\\\\s*)?` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst PATTERN_WITH_PREFIX = new RegExp(\n    `(?:within|in|for)\\\\s*` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nconst PATTERN_WITH_PREFIX_STRICT = new RegExp(\n    `(?:within|in|for)\\\\s*` +\n        `(?:(?:about|around|roughly|approximately|just)\\\\s*(?:~\\\\s*)?)?(${TIME_UNITS_NO_ABBR_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nexport default class ENTimeUnitWithinFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(context: ParsingContext): RegExp {\n        if (this.strictMode) {\n            return PATTERN_WITH_PREFIX_STRICT;\n        }\n        return context.option.forwardDate ? PATTERN_WITH_OPTIONAL_PREFIX : PATTERN_WITH_PREFIX;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        // Exclude \"for the unit\" phases, e.g. \"for the year\"\n        if (match[0].match(/^for\\s*the\\s*\\w+/)) {\n            return null;\n        }\n\n        const timeUnits = parseTimeUnits(match[1]);\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingResult } from \"../../../results\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n// prettier-ignore\nconst PATTERN = new RegExp(\n    `(?:on\\\\s{0,3})?` +\n        `(${ORDINAL_NUMBER_PATTERN})` +\n        `(?:` +\n            `\\\\s{0,3}(?:to|\\\\-|\\\\\u2013|until|through|till)?\\\\s{0,3}` +\n            `(${ORDINAL_NUMBER_PATTERN})` +\n        \")?\" +\n        `(?:-|/|\\\\s{0,3}(?:of)?\\\\s{0,3})` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        \"(?:\" +\n            `(?:-|/|,?\\\\s{0,3})` +\n            `(${YEAR_PATTERN}(?![^\\\\s]\\\\d))` +\n        \")?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst DATE_GROUP = 1;\nconst DATE_TO_GROUP = 2;\nconst MONTH_NAME_GROUP = 3;\nconst YEAR_GROUP = 4;\n\nexport default class ENMonthNameLittleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const result = context.createParsingResult(match.index, match[0]);\n\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            // e.g. \"[96 Aug]\" => \"9[6 Aug]\", we need to shift away from the next number\n            match.index = match.index + match[DATE_GROUP].length;\n            return null;\n        }\n\n        result.start.assign(\"month\", month);\n        result.start.assign(\"day\", day);\n\n        if (match[YEAR_GROUP]) {\n            const yearNumber = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", yearNumber);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        if (match[DATE_TO_GROUP]) {\n            const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n\n            result.end = result.start.clone();\n            result.end.assign(\"day\", endDate);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { ORDINAL_NUMBER_PATTERN, parseOrdinalNumberPattern } from \"../constants\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n// prettier-ignore\nconst PATTERN = new RegExp(\n    `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        \"(?:-|/|\\\\s*,?\\\\s*)\" +\n        `(${ORDINAL_NUMBER_PATTERN})(?!\\\\s*(?:am|pm))\\\\s*` +\n        \"(?:\" +\n            \"(?:to|\\\\-)\\\\s*\" +\n            `(${ORDINAL_NUMBER_PATTERN})\\\\s*` +\n        \")?\" +\n        \"(?:\" +\n            `(?:-|/|\\\\s*,\\\\s*|\\\\s+)` +\n            `(${YEAR_PATTERN})` +\n        \")?\" +\n        \"(?=\\\\W|$)(?!\\\\:\\\\d)\",\n    \"i\"\n);\n\nconst MONTH_NAME_GROUP = 1;\nconst DATE_GROUP = 2;\nconst DATE_TO_GROUP = 3;\nconst YEAR_GROUP = 4;\n\n/**\n * The parser for parsing US's date format that begin with month's name.\n *  - January 13\n *  - January 13, 2012\n *  - January 13 - 15, 2012\n * Note: Watch out for:\n *  - January 12:00\n *  - January 12.44\n *  - January 1222344\n *  - January 21 (when shouldSkipYearLikeDate=true)\n */\nexport default class ENMonthNameMiddleEndianParser extends AbstractParserWithWordBoundaryChecking {\n    shouldSkipYearLikeDate: boolean;\n\n    constructor(shouldSkipYearLikeDate: boolean) {\n        super();\n        this.shouldSkipYearLikeDate = shouldSkipYearLikeDate;\n    }\n\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n        const day = parseOrdinalNumberPattern(match[DATE_GROUP]);\n        if (day > 31) {\n            return null;\n        }\n\n        // Skip the case where the day looks like a year (ex: January 21)\n        if (this.shouldSkipYearLikeDate) {\n            if (!match[DATE_TO_GROUP] && !match[YEAR_GROUP] && match[DATE_GROUP].match(/^2[0-5]$/)) {\n                return null;\n            }\n        }\n        const components = context\n            .createParsingComponents({\n                day: day,\n                month: month,\n            })\n            .addTag(\"parser/ENMonthNameMiddleEndianParser\");\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            components.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            components.imply(\"year\", year);\n        }\n        if (!match[DATE_TO_GROUP]) {\n            return components;\n        }\n\n        // Text can be 'range' value. Such as 'January 12 - 13, 2012'\n        const endDate = parseOrdinalNumberPattern(match[DATE_TO_GROUP]);\n        const result = context.createParsingResult(match.index, match[0]);\n        result.start = components;\n        result.end = components.clone();\n        result.end.assign(\"day\", endDate);\n\n        return result;\n    }\n}\n", "import { FULL_MONTH_NAME_DICTIONARY, MONTH_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { findYearClosestToRef } from \"../../../calculation/years\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { YEAR_PATTERN, parseYear } from \"../constants\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `((?:in)\\\\s*)?` +\n        `(${matchAnyPattern(MONTH_DICTIONARY)})` +\n        `\\\\s*` +\n        `(?:` +\n        `[,-]?\\\\s*(${YEAR_PATTERN})?` +\n        \")?\" +\n        \"(?=[^\\\\s\\\\w]|\\\\s+[^0-9]|\\\\s+$|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst YEAR_GROUP = 3;\n\n/**\n * The parser for parsing month name and year.\n * - January, 2012\n * - January 2012\n * - January\n * (in) Jan\n */\nexport default class ENMonthNameParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const monthName = match[MONTH_NAME_GROUP].toLowerCase();\n\n        // skip some unlikely words \"jan\", \"mar\", ..\n        if (match[0].length <= 3 && !FULL_MONTH_NAME_DICTIONARY[monthName]) {\n            return null;\n        }\n\n        const result = context.createParsingResult(\n            match.index + (match[PREFIX_GROUP] || \"\").length,\n            match.index + match[0].length\n        );\n        result.start.imply(\"day\", 1);\n        result.start.addTag(\"parser/ENMonthNameParser\");\n\n        const month = MONTH_DICTIONARY[monthName];\n        result.start.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const year = parseYear(match[YEAR_GROUP]);\n            result.start.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, 1, month);\n            result.start.imply(\"year\", year);\n        }\n\n        return result;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { MONTH_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\n/*\n    Date format with slash \"/\" between numbers like ENSlashDateFormatParser,\n    but this parser expect year before month and date.\n    - YYYY/MM/DD\n    - YYYY-MM-DD\n    - YYYY.MM.DD\n*/\nconst PATTERN = new RegExp(\n    `([0-9]{4})[\\\\.\\\\/\\\\s]` +\n        `(?:(${matchAnyPattern(MONTH_DICTIONARY)})|([0-9]{1,2}))[\\\\.\\\\/\\\\s]` +\n        `([0-9]{1,2})` +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NAME_GROUP = 2;\nconst MONTH_NUMBER_GROUP = 3;\nconst DATE_NUMBER_GROUP = 4;\n\nexport default class ENCasualYearMonthDayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const month = match[MONTH_NUMBER_GROUP]\n            ? parseInt(match[MONTH_NUMBER_GROUP])\n            : MONTH_DICTIONARY[match[MONTH_NAME_GROUP].toLowerCase()];\n\n        if (month < 1 || month > 12) {\n            return null;\n        }\n\n        const year = parseInt(match[YEAR_NUMBER_GROUP]);\n        const day = parseInt(match[DATE_NUMBER_GROUP]);\n\n        return {\n            day: day,\n            month: month,\n            year: year,\n        };\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\"([0-9]|0[1-9]|1[012])/([0-9]{4})\" + \"\", \"i\");\n\nconst MONTH_GROUP = 1;\nconst YEAR_GROUP = 2;\n\n/**\n * Month/Year date format with slash \"/\" (also \"-\" and \".\") between numbers\n * - 11/05\n * - 06/2005\n */\nexport default class ENSlashMonthFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const year = parseInt(match[YEAR_GROUP]);\n        const month = parseInt(match[MONTH_GROUP]);\n\n        return context.createParsingComponents().imply(\"day\", 1).assign(\"month\", month).assign(\"year\", year);\n    }\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../results\";\nimport { Meridiem } from \"../../types\";\n\n// prettier-ignore\nfunction primaryTimePattern(leftBoundary: string, primaryPrefix: string, primarySuffix: string, flags: string) {\n    return new RegExp(\n            `${leftBoundary}` +\n            `${primaryPrefix}` +\n            `(\\\\d{1,4})` +\n            `(?:` +\n                `(?:\\\\.|:|\uFF1A)` +\n                `(\\\\d{1,2})` +\n                `(?:` +\n                    `(?::|\uFF1A)` +\n                    `(\\\\d{2})` +\n                    `(?:\\\\.(\\\\d{1,6}))?` +\n                `)?` +\n            `)?` +\n            `(?:\\\\s*(a\\\\.m\\\\.|p\\\\.m\\\\.|am?|pm?))?` +\n            `${primarySuffix}`,\n        flags\n    );\n}\n\n// prettier-ignore\nfunction followingTimePatten(followingPhase: string, followingSuffix: string) {\n    return new RegExp(\n        `^(${followingPhase})` +\n            `(\\\\d{1,4})` +\n            `(?:` +\n                `(?:\\\\.|\\\\:|\\\\\uFF1A)` +\n                `(\\\\d{1,2})` +\n                `(?:` +\n                    `(?:\\\\.|\\\\:|\\\\\uFF1A)` +\n                    `(\\\\d{1,2})(?:\\\\.(\\\\d{1,6}))?` +\n                `)?` +\n            `)?` +\n            `(?:\\\\s*(a\\\\.m\\\\.|p\\\\.m\\\\.|am?|pm?))?` +\n            `${followingSuffix}`,\n        \"i\"\n    );\n}\n\nconst HOUR_GROUP = 2;\nconst MINUTE_GROUP = 3;\nconst SECOND_GROUP = 4;\nconst MILLI_SECOND_GROUP = 5;\nconst AM_PM_HOUR_GROUP = 6;\n\nexport abstract class AbstractTimeExpressionParser implements Parser {\n    abstract primaryPrefix(): string;\n    abstract followingPhase(): string;\n    strictMode: boolean;\n\n    constructor(strictMode = false) {\n        this.strictMode = strictMode;\n    }\n\n    patternFlags(): string {\n        return \"i\";\n    }\n\n    primaryPatternLeftBoundary(): string {\n        return `(^|\\\\s|T|\\\\b)`;\n    }\n\n    primarySuffix(): string {\n        return `(?!/)(?=\\\\W|$)`;\n    }\n\n    followingSuffix(): string {\n        return `(?!/)(?=\\\\W|$)`;\n    }\n\n    pattern(context: ParsingContext): RegExp {\n        return this.getPrimaryTimePatternThroughCache();\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        const startComponents = this.extractPrimaryTimeComponents(context, match);\n        if (!startComponents) {\n            match.index += match[0].length; // Skip over potential overlapping pattern\n            return null;\n        }\n\n        const index = match.index + match[1].length;\n        const text = match[0].substring(match[1].length);\n        const result = context.createParsingResult(index, text, startComponents);\n        match.index += match[0].length; // Skip over potential overlapping pattern\n\n        const remainingText = context.text.substring(match.index);\n        const followingPattern = this.getFollowingTimePatternThroughCache();\n        const followingMatch = followingPattern.exec(remainingText);\n\n        // Pattern \"456-12\", \"2022-12\" should not be time without proper context\n        if (text.match(/^\\d{3,4}/) && followingMatch && followingMatch[0].match(/^\\s*([+-])\\s*\\d{2,4}$/)) {\n            return null;\n        }\n\n        if (\n            !followingMatch ||\n            // Pattern \"YY.YY -XXXX\" is more like timezone offset\n            followingMatch[0].match(/^\\s*([+-])\\s*\\d{3,4}$/)\n        ) {\n            return this.checkAndReturnWithoutFollowingPattern(result);\n        }\n\n        result.end = this.extractFollowingTimeComponents(context, followingMatch, result);\n        if (result.end) {\n            result.text += followingMatch[0];\n        }\n\n        return this.checkAndReturnWithFollowingPattern(result);\n    }\n\n    extractPrimaryTimeComponents(\n        context: ParsingContext,\n        match: RegExpMatchArray,\n        strict = false\n    ): null | ParsingComponents {\n        const components = context.createParsingComponents();\n        let minute = 0;\n        let meridiem = null;\n\n        // ----- Hours\n        let hour = parseInt(match[HOUR_GROUP]);\n        if (hour > 100) {\n            if (this.strictMode || match[MINUTE_GROUP] != null) {\n                return null;\n            }\n\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (hour > 24) {\n            return null;\n        }\n\n        // ----- Minutes\n        if (match[MINUTE_GROUP] != null) {\n            if (match[MINUTE_GROUP].length == 1 && !match[AM_PM_HOUR_GROUP]) {\n                // Skip single digit minute e.g. \"at 1.1 xx\"\n                return null;\n            }\n\n            minute = parseInt(match[MINUTE_GROUP]);\n        }\n\n        if (minute >= 60) {\n            return null;\n        }\n\n        if (hour > 12) {\n            meridiem = Meridiem.PM;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12) return null;\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                }\n            }\n\n            if (ampm == \"p\") {\n                meridiem = Meridiem.PM;\n                if (hour != 12) {\n                    hour += 12;\n                }\n            }\n        }\n\n        components.assign(\"hour\", hour);\n        components.assign(\"minute\", minute);\n\n        if (meridiem !== null) {\n            components.assign(\"meridiem\", meridiem);\n        } else {\n            if (hour < 12) {\n                components.imply(\"meridiem\", Meridiem.AM);\n            } else {\n                components.imply(\"meridiem\", Meridiem.PM);\n            }\n        }\n\n        // ----- Millisecond\n        if (match[MILLI_SECOND_GROUP] != null) {\n            const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));\n            if (millisecond >= 1000) return null;\n\n            components.assign(\"millisecond\", millisecond);\n        }\n\n        // ----- Second\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60) return null;\n\n            components.assign(\"second\", second);\n        }\n\n        return components;\n    }\n\n    extractFollowingTimeComponents(\n        context: ParsingContext,\n        match: RegExpMatchArray,\n        result: ParsingResult\n    ): null | ParsingComponents {\n        const components = context.createParsingComponents();\n\n        // ----- Millisecond\n        if (match[MILLI_SECOND_GROUP] != null) {\n            const millisecond = parseInt(match[MILLI_SECOND_GROUP].substring(0, 3));\n            if (millisecond >= 1000) return null;\n\n            components.assign(\"millisecond\", millisecond);\n        }\n\n        // ----- Second\n        if (match[SECOND_GROUP] != null) {\n            const second = parseInt(match[SECOND_GROUP]);\n            if (second >= 60) return null;\n\n            components.assign(\"second\", second);\n        }\n\n        let hour = parseInt(match[HOUR_GROUP]);\n        let minute = 0;\n        let meridiem = -1;\n\n        // ----- Minute\n        if (match[MINUTE_GROUP] != null) {\n            minute = parseInt(match[MINUTE_GROUP]);\n        } else if (hour > 100) {\n            minute = hour % 100;\n            hour = Math.floor(hour / 100);\n        }\n\n        if (minute >= 60 || hour > 24) {\n            return null;\n        }\n\n        if (hour >= 12) {\n            meridiem = Meridiem.PM;\n        }\n\n        // ----- AM & PM\n        if (match[AM_PM_HOUR_GROUP] != null) {\n            if (hour > 12) {\n                return null;\n            }\n\n            const ampm = match[AM_PM_HOUR_GROUP][0].toLowerCase();\n            if (ampm == \"a\") {\n                meridiem = Meridiem.AM;\n                if (hour == 12) {\n                    hour = 0;\n                    if (!components.isCertain(\"day\")) {\n                        components.imply(\"day\", components.get(\"day\") + 1);\n                    }\n                }\n            }\n\n            if (ampm == \"p\") {\n                meridiem = Meridiem.PM;\n                if (hour != 12) hour += 12;\n            }\n\n            if (!result.start.isCertain(\"meridiem\")) {\n                if (meridiem == Meridiem.AM) {\n                    result.start.imply(\"meridiem\", Meridiem.AM);\n\n                    if (result.start.get(\"hour\") == 12) {\n                        result.start.assign(\"hour\", 0);\n                    }\n                } else {\n                    result.start.imply(\"meridiem\", Meridiem.PM);\n\n                    if (result.start.get(\"hour\") != 12) {\n                        result.start.assign(\"hour\", result.start.get(\"hour\") + 12);\n                    }\n                }\n            }\n        }\n\n        components.assign(\"hour\", hour);\n        components.assign(\"minute\", minute);\n\n        if (meridiem >= 0) {\n            components.assign(\"meridiem\", meridiem);\n        } else {\n            const startAtPM = result.start.isCertain(\"meridiem\") && result.start.get(\"hour\") > 12;\n            if (startAtPM) {\n                if (result.start.get(\"hour\") - 12 > hour) {\n                    // 10pm - 1 (am)\n                    components.imply(\"meridiem\", Meridiem.AM);\n                } else if (hour <= 12) {\n                    components.assign(\"hour\", hour + 12);\n                    components.assign(\"meridiem\", Meridiem.PM);\n                }\n            } else if (hour > 12) {\n                components.imply(\"meridiem\", Meridiem.PM);\n            } else if (hour <= 12) {\n                components.imply(\"meridiem\", Meridiem.AM);\n            }\n        }\n\n        if (components.date().getTime() < result.start.date().getTime()) {\n            components.imply(\"day\", components.get(\"day\") + 1);\n        }\n\n        return components;\n    }\n\n    private checkAndReturnWithoutFollowingPattern(result) {\n        // Single digit (e.g \"1\") should not be counted as time expression (without proper context)\n        if (result.text.match(/^\\d$/)) {\n            return null;\n        }\n\n        // Three or more digit (e.g. \"203\", \"2014\") should not be counted as time expression (without proper context)\n        if (result.text.match(/^\\d\\d\\d+$/)) {\n            return null;\n        }\n\n        // Instead of \"am/pm\", it ends with \"a\" or \"p\" (e.g \"1a\", \"123p\"), this seems unlikely\n        if (result.text.match(/\\d[apAP]$/)) {\n            return null;\n        }\n\n        // If it ends only with numbers or dots\n        const endingWithNumbers = result.text.match(/[^\\d:.](\\d[\\d.]+)$/);\n        if (endingWithNumbers) {\n            const endingNumbers: string = endingWithNumbers[1];\n\n            // In strict mode (e.g. \"at 1\" or \"at 1.2\"), this should not be accepted\n            if (this.strictMode) {\n                return null;\n            }\n\n            // If it ends only with dot single digit, e.g. \"at 1.2\"\n            if (endingNumbers.includes(\".\") && !endingNumbers.match(/\\d(\\.\\d{2})+$/)) {\n                return null;\n            }\n\n            // If it ends only with numbers above 24, e.g. \"at 25\"\n            const endingNumberVal = parseInt(endingNumbers);\n            if (endingNumberVal > 24) {\n                return null;\n            }\n        }\n\n        return result;\n    }\n\n    private checkAndReturnWithFollowingPattern(result) {\n        if (result.text.match(/^\\d+-\\d+$/)) {\n            return null;\n        }\n\n        // If it ends only with numbers or dots\n        const endingWithNumbers = result.text.match(/[^\\d:.](\\d[\\d.]+)\\s*-\\s*(\\d[\\d.]+)$/);\n        if (endingWithNumbers) {\n            // In strict mode (e.g. \"at 1-3\" or \"at 1.2 - 2.3\"), this should not be accepted\n            if (this.strictMode) {\n                return null;\n            }\n\n            const startingNumbers: string = endingWithNumbers[1];\n            const endingNumbers: string = endingWithNumbers[2];\n            // If it ends only with dot single digit, e.g. \"at 1.2\"\n            if (endingNumbers.includes(\".\") && !endingNumbers.match(/\\d(\\.\\d{2})+$/)) {\n                return null;\n            }\n\n            // If it ends only with numbers above 24, e.g. \"at 25\"\n            const endingNumberVal = parseInt(endingNumbers);\n            const startingNumberVal = parseInt(startingNumbers);\n            if (endingNumberVal > 24 || startingNumberVal > 24) {\n                return null;\n            }\n        }\n\n        return result;\n    }\n\n    private cachedPrimaryPrefix = null;\n    private cachedPrimarySuffix = null;\n    private cachedPrimaryTimePattern = null;\n\n    getPrimaryTimePatternThroughCache() {\n        const primaryPrefix = this.primaryPrefix();\n        const primarySuffix = this.primarySuffix();\n\n        if (this.cachedPrimaryPrefix === primaryPrefix && this.cachedPrimarySuffix === primarySuffix) {\n            return this.cachedPrimaryTimePattern;\n        }\n\n        this.cachedPrimaryTimePattern = primaryTimePattern(\n            this.primaryPatternLeftBoundary(),\n            primaryPrefix,\n            primarySuffix,\n            this.patternFlags()\n        );\n        this.cachedPrimaryPrefix = primaryPrefix;\n        this.cachedPrimarySuffix = primarySuffix;\n        return this.cachedPrimaryTimePattern;\n    }\n\n    private cachedFollowingPhase = null;\n    private cachedFollowingSuffix = null;\n    private cachedFollowingTimePatten = null;\n\n    getFollowingTimePatternThroughCache() {\n        const followingPhase = this.followingPhase();\n        const followingSuffix = this.followingSuffix();\n\n        if (this.cachedFollowingPhase === followingPhase && this.cachedFollowingSuffix === followingSuffix) {\n            return this.cachedFollowingTimePatten;\n        }\n\n        this.cachedFollowingTimePatten = followingTimePatten(followingPhase, followingSuffix);\n        this.cachedFollowingPhase = followingPhase;\n        this.cachedFollowingSuffix = followingSuffix;\n        return this.cachedFollowingTimePatten;\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { Meridiem } from \"../../../types\";\nimport { AbstractTimeExpressionParser } from \"../../../common/parsers/AbstractTimeExpressionParser\";\n\nexport default class ENTimeExpressionParser extends AbstractTimeExpressionParser {\n    constructor(strictMode) {\n        super(strictMode);\n    }\n\n    followingPhase(): string {\n        return \"\\\\s*(?:\\\\-|\\\\\u2013|\\\\~|\\\\\u301C|to|until|through|till|\\\\?)\\\\s*\";\n    }\n\n    primaryPrefix(): string {\n        return \"(?:(?:at|from)\\\\s*)??\";\n    }\n\n    primarySuffix(): string {\n        return \"(?:\\\\s*(?:o\\\\W*clock|at\\\\s*night|in\\\\s*the\\\\s*(?:morning|afternoon)))?(?!/)(?=\\\\W|$)\";\n    }\n\n    extractPrimaryTimeComponents(context: ParsingContext, match: RegExpMatchArray): null | ParsingComponents {\n        const components = super.extractPrimaryTimeComponents(context, match);\n        if (!components) {\n            return components;\n        }\n\n        if (match[0].endsWith(\"night\")) {\n            const hour = components.get(\"hour\");\n            if (hour >= 6 && hour < 12) {\n                components.assign(\"hour\", components.get(\"hour\") + 12);\n                components.assign(\"meridiem\", Meridiem.PM);\n            } else if (hour < 6) {\n                components.assign(\"meridiem\", Meridiem.AM);\n            }\n        }\n\n        if (match[0].endsWith(\"afternoon\")) {\n            components.assign(\"meridiem\", Meridiem.PM);\n            const hour = components.get(\"hour\");\n            if (hour >= 0 && hour <= 6) {\n                components.assign(\"hour\", components.get(\"hour\") + 12);\n            }\n        }\n\n        if (match[0].endsWith(\"morning\")) {\n            components.assign(\"meridiem\", Meridiem.AM);\n            const hour = components.get(\"hour\");\n            if (hour < 12) {\n                components.assign(\"hour\", components.get(\"hour\"));\n            }\n        }\n\n        return components.addTag(\"parser/ENTimeExpressionParser\");\n    }\n}\n", "import { OpUnitType, QUnitType } from \"dayjs\";\nimport { ParsingComponents } from \"../results\";\n\nexport type TimeUnits = { [c in OpUnitType | QUnitType]?: number };\n\nexport function reverseTimeUnits(timeUnits: TimeUnits): TimeUnits {\n    const reversed = {};\n    for (const key in timeUnits) {\n        // noinspection JSUnfilteredForInLoop\n        reversed[key] = -timeUnits[key];\n    }\n\n    return reversed as TimeUnits;\n}\n\nexport function addImpliedTimeUnits(components: ParsingComponents, timeUnits: TimeUnits): ParsingComponents {\n    const output = components.clone();\n\n    let date = components.dayjs();\n    for (const key in timeUnits) {\n        // noinspection JSUnfilteredForInLoop,TypeScriptValidateTypes\n        date = date.add(timeUnits[key], key as QUnitType);\n    }\n\n    if (\"day\" in timeUnits || \"d\" in timeUnits || \"week\" in timeUnits || \"month\" in timeUnits || \"year\" in timeUnits) {\n        output.imply(\"day\", date.date());\n        output.imply(\"month\", date.month() + 1);\n        output.imply(\"year\", date.year());\n    }\n\n    if (\"second\" in timeUnits || \"minute\" in timeUnits || \"hour\" in timeUnits) {\n        output.imply(\"second\", date.second());\n        output.imply(\"minute\", date.minute());\n        output.imply(\"hour\", date.hour());\n    }\n\n    return output;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(${TIME_UNITS_PATTERN})\\\\s{0,5}(?:ago|before|earlier)(?=\\\\W|$)`, \"i\");\nconst STRICT_PATTERN = new RegExp(`(${TIME_UNITS_NO_ABBR_PATTERN})\\\\s{0,5}(?:ago|before|earlier)(?=\\\\W|$)`, \"i\");\n\nexport default class ENTimeUnitAgoFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const timeUnits = parseTimeUnits(match[1]);\n        const outputTimeUnits = reverseTimeUnits(timeUnits);\n\n        return ParsingComponents.createRelativeFromReference(context.reference, outputTimeUnits);\n    }\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN, TIME_UNITS_PATTERN } from \"../constants\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\n\nconst PATTERN = new RegExp(\n    `(${TIME_UNITS_PATTERN})\\\\s{0,5}(?:later|after|from now|henceforth|forward|out)` + \"(?=(?:\\\\W|$))\",\n    \"i\"\n);\n\nconst STRICT_PATTERN = new RegExp(`(${TIME_UNITS_NO_ABBR_PATTERN})\\\\s{0,5}(later|after|from now)(?=\\\\W|$)`, \"i\");\nconst GROUP_NUM_TIMEUNITS = 1;\n\nexport default class ENTimeUnitLaterFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.strictMode ? STRICT_PATTERN : PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const fragments = parseTimeUnits(match[GROUP_NUM_TIMEUNITS]);\n        return ParsingComponents.createRelativeFromReference(context.reference, fragments);\n    }\n}\n", "import { ParsingContext, Refiner } from \"../chrono\";\nimport { ParsingResult } from \"../results\";\n\n/**\n * A special type of {@link Refiner} to filter the results\n */\nexport abstract class Filter implements Refiner {\n    abstract isValid(context: ParsingContext, result: ParsingResult): boolean;\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        return results.filter((r) => this.isValid(context, r));\n    }\n}\n\n/**\n * A special type of {@link Refiner} to merge consecutive results\n */\nexport abstract class MergingRefiner implements Refiner {\n    abstract shouldMergeResults(\n        textBetween: string,\n        currentResult: ParsingResult,\n        nextResult: ParsingResult,\n        context: ParsingContext\n    ): boolean;\n\n    abstract mergeResults(\n        textBetween: string,\n        currentResult: ParsingResult,\n        nextResult: ParsingResult,\n        context: ParsingContext\n    ): ParsingResult;\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (results.length < 2) {\n            return results;\n        }\n\n        const mergedResults: ParsingResult[] = [];\n        let curResult = results[0];\n        let nextResult = null;\n\n        for (let i = 1; i < results.length; i++) {\n            nextResult = results[i];\n\n            const textBetween = context.text.substring(curResult.index + curResult.text.length, nextResult.index);\n            if (!this.shouldMergeResults(textBetween, curResult, nextResult, context)) {\n                mergedResults.push(curResult);\n                curResult = nextResult;\n            } else {\n                const left = curResult;\n                const right = nextResult;\n                const mergedResult = this.mergeResults(textBetween, left, right, context);\n                context.debug(() => {\n                    console.log(`${this.constructor.name} merged ${left} and ${right} into ${mergedResult}`);\n                });\n\n                curResult = mergedResult;\n            }\n        }\n\n        if (curResult != null) {\n            mergedResults.push(curResult);\n        }\n\n        return mergedResults;\n    }\n}\n", "/*\n  \n*/\n\nimport { ParsingResult } from \"../../results\";\nimport { MergingRefiner } from \"../abstractRefiners\";\n\nexport default abstract class AbstractMergeDateRangeRefiner extends MergingRefiner {\n    abstract patternBetween(): RegExp;\n\n    shouldMergeResults(textBetween, currentResult, nextResult): boolean {\n        return !currentResult.end && !nextResult.end && textBetween.match(this.patternBetween()) != null;\n    }\n\n    mergeResults(textBetween, fromResult, toResult): ParsingResult {\n        if (!fromResult.start.isOnlyWeekdayComponent() && !toResult.start.isOnlyWeekdayComponent()) {\n            toResult.start.getCertainComponents().forEach((key) => {\n                if (!fromResult.start.isCertain(key)) {\n                    fromResult.start.imply(key, toResult.start.get(key));\n                }\n            });\n\n            fromResult.start.getCertainComponents().forEach((key) => {\n                if (!toResult.start.isCertain(key)) {\n                    toResult.start.imply(key, fromResult.start.get(key));\n                }\n            });\n        }\n\n        if (fromResult.start.date().getTime() > toResult.start.date().getTime()) {\n            let fromMoment = fromResult.start.dayjs();\n            let toMoment = toResult.start.dayjs();\n            if (toResult.start.isOnlyWeekdayComponent() && toMoment.add(7, \"days\").isAfter(fromMoment)) {\n                toMoment = toMoment.add(7, \"days\");\n                toResult.start.imply(\"day\", toMoment.date());\n                toResult.start.imply(\"month\", toMoment.month() + 1);\n                toResult.start.imply(\"year\", toMoment.year());\n            } else if (fromResult.start.isOnlyWeekdayComponent() && fromMoment.add(-7, \"days\").isBefore(toMoment)) {\n                fromMoment = fromMoment.add(-7, \"days\");\n                fromResult.start.imply(\"day\", fromMoment.date());\n                fromResult.start.imply(\"month\", fromMoment.month() + 1);\n                fromResult.start.imply(\"year\", fromMoment.year());\n            } else if (toResult.start.isDateWithUnknownYear() && toMoment.add(1, \"years\").isAfter(fromMoment)) {\n                toMoment = toMoment.add(1, \"years\");\n                toResult.start.imply(\"year\", toMoment.year());\n            } else if (fromResult.start.isDateWithUnknownYear() && fromMoment.add(-1, \"years\").isBefore(toMoment)) {\n                fromMoment = fromMoment.add(-1, \"years\");\n                fromResult.start.imply(\"year\", fromMoment.year());\n            } else {\n                [toResult, fromResult] = [fromResult, toResult];\n            }\n        }\n\n        const result = fromResult.clone();\n        result.start = fromResult.start;\n        result.end = toResult.start;\n        result.index = Math.min(fromResult.index, toResult.index);\n        if (fromResult.index < toResult.index) {\n            result.text = fromResult.text + textBetween + toResult.text;\n        } else {\n            result.text = toResult.text + textBetween + fromResult.text;\n        }\n\n        return result;\n    }\n}\n", "/*\n  \n*/\n\nimport AbstractMergeDateRangeRefiner from \"../../../common/refiners/AbstractMergeDateRangeRefiner\";\n\n/**\n * Merging before and after results (see. AbstractMergeDateRangeRefiner)\n * This implementation should provide English connecting phases\n * - 2020-02-13 [to] 2020-02-13\n * - Wednesday [-] Friday\n */\nexport default class ENMergeDateRangeRefiner extends AbstractMergeDateRangeRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*(to|-|\u2013|until|through|till)\\s*$/i;\n    }\n}\n", "import { ParsingComponents, ParsingResult } from \"../results\";\nimport { Meridiem } from \"../types\";\nimport { assignSimilarDate, implySimilarDate } from \"../utils/dayjs\";\n\nexport function mergeDateTimeResult(dateResult: ParsingResult, timeResult: ParsingResult): ParsingResult {\n    const result = dateResult.clone();\n    const beginDate = dateResult.start;\n    const beginTime = timeResult.start;\n\n    result.start = mergeDateTimeComponent(beginDate, beginTime);\n    if (dateResult.end != null || timeResult.end != null) {\n        const endDate = dateResult.end == null ? dateResult.start : dateResult.end;\n        const endTime = timeResult.end == null ? timeResult.start : timeResult.end;\n        const endDateTime = mergeDateTimeComponent(endDate, endTime);\n\n        if (dateResult.end == null && endDateTime.date().getTime() < result.start.date().getTime()) {\n            // For example,  \"Tuesday 9pm - 1am\" the ending should actually be 1am on the next day.\n            // We need to add to ending by another day.\n            const nextDayJs = endDateTime.dayjs().add(1, \"day\");\n            if (endDateTime.isCertain(\"day\")) {\n                assignSimilarDate(endDateTime, nextDayJs);\n            } else {\n                implySimilarDate(endDateTime, nextDayJs);\n            }\n        }\n\n        result.end = endDateTime;\n    }\n\n    return result;\n}\n\nexport function mergeDateTimeComponent(\n    dateComponent: ParsingComponents,\n    timeComponent: ParsingComponents\n): ParsingComponents {\n    const dateTimeComponent = dateComponent.clone();\n\n    if (timeComponent.isCertain(\"hour\")) {\n        dateTimeComponent.assign(\"hour\", timeComponent.get(\"hour\"));\n        dateTimeComponent.assign(\"minute\", timeComponent.get(\"minute\"));\n\n        if (timeComponent.isCertain(\"second\")) {\n            dateTimeComponent.assign(\"second\", timeComponent.get(\"second\"));\n\n            if (timeComponent.isCertain(\"millisecond\")) {\n                dateTimeComponent.assign(\"millisecond\", timeComponent.get(\"millisecond\"));\n            } else {\n                dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n            }\n        } else {\n            dateTimeComponent.imply(\"second\", timeComponent.get(\"second\"));\n            dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n        }\n    } else {\n        dateTimeComponent.imply(\"hour\", timeComponent.get(\"hour\"));\n        dateTimeComponent.imply(\"minute\", timeComponent.get(\"minute\"));\n        dateTimeComponent.imply(\"second\", timeComponent.get(\"second\"));\n        dateTimeComponent.imply(\"millisecond\", timeComponent.get(\"millisecond\"));\n    }\n\n    if (timeComponent.isCertain(\"timezoneOffset\")) {\n        dateTimeComponent.assign(\"timezoneOffset\", timeComponent.get(\"timezoneOffset\"));\n    }\n\n    if (timeComponent.isCertain(\"meridiem\")) {\n        dateTimeComponent.assign(\"meridiem\", timeComponent.get(\"meridiem\"));\n    } else if (timeComponent.get(\"meridiem\") != null && dateTimeComponent.get(\"meridiem\") == null) {\n        dateTimeComponent.imply(\"meridiem\", timeComponent.get(\"meridiem\"));\n    }\n\n    if (dateTimeComponent.get(\"meridiem\") == Meridiem.PM && dateTimeComponent.get(\"hour\") < 12) {\n        if (timeComponent.isCertain(\"hour\")) {\n            dateTimeComponent.assign(\"hour\", dateTimeComponent.get(\"hour\") + 12);\n        } else {\n            dateTimeComponent.imply(\"hour\", dateTimeComponent.get(\"hour\") + 12);\n        }\n    }\n\n    dateTimeComponent.addTags(dateComponent.tags());\n    dateTimeComponent.addTags(timeComponent.tags());\n    return dateTimeComponent;\n}\n", "/*\n\n*/\n\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\nimport { mergeDateTimeResult } from \"../../calculation/mergingCalculation\";\n\nexport default abstract class AbstractMergeDateTimeRefiner extends MergingRefiner {\n    abstract patternBetween(): RegExp;\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        return (\n            ((currentResult.start.isOnlyDate() && nextResult.start.isOnlyTime()) ||\n                (nextResult.start.isOnlyDate() && currentResult.start.isOnlyTime())) &&\n            textBetween.match(this.patternBetween()) != null\n        );\n    }\n\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const result = currentResult.start.isOnlyDate()\n            ? mergeDateTimeResult(currentResult, nextResult)\n            : mergeDateTimeResult(nextResult, currentResult);\n\n        result.index = currentResult.index;\n        result.text = currentResult.text + textBetween + nextResult.text;\n        return result;\n    }\n}\n", "import AbstractMergeDateTimeRefiner from \"../../../common/refiners/AbstractMergeDateTimeRefiner\";\n\n/**\n * Merging date-only result and time-only result (see. AbstractMergeDateTimeRefiner).\n * This implementation should provide English connecting phases\n * - 2020-02-13 [at] 6pm\n * - Tomorrow [after] 7am\n */\nexport default class ENMergeDateTimeRefiner extends AbstractMergeDateTimeRefiner {\n    patternBetween(): RegExp {\n        return new RegExp(\"^\\\\s*(T|at|after|before|on|of|,|-)?\\\\s*$\");\n    }\n}\n", "// Map ABBR -> Offset in minute\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { TimezoneAbbrMap } from \"../../types\";\nimport { ParsingResult } from \"../../results\";\nimport { toTimezoneOffset } from \"../../timezone\";\n\nconst TIMEZONE_NAME_PATTERN = new RegExp(\"^\\\\s*,?\\\\s*\\\\(?([A-Z]{2,4})\\\\)?(?=\\\\W|$)\", \"i\");\n\nexport default class ExtractTimezoneAbbrRefiner implements Refiner {\n    constructor(private readonly timezoneOverrides?: TimezoneAbbrMap) {}\n\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        const timezoneOverrides = context.option.timezones ?? {};\n\n        results.forEach((result) => {\n            const suffix = context.text.substring(result.index + result.text.length);\n            const match = TIMEZONE_NAME_PATTERN.exec(suffix);\n            if (!match) {\n                return;\n            }\n\n            const timezoneAbbr = match[1].toUpperCase();\n            const refDate = result.start.date() ?? result.refDate ?? new Date();\n            const tzOverrides = { ...this.timezoneOverrides, ...timezoneOverrides };\n            const extractedTimezoneOffset = toTimezoneOffset(timezoneAbbr, refDate, tzOverrides);\n            if (extractedTimezoneOffset == null) {\n                return;\n            }\n            context.debug(() => {\n                console.log(\n                    `Extracting timezone: '${timezoneAbbr}' into: ${extractedTimezoneOffset} for: ${result.start}`\n                );\n            });\n\n            const currentTimezoneOffset = result.start.get(\"timezoneOffset\");\n            if (currentTimezoneOffset !== null && extractedTimezoneOffset != currentTimezoneOffset) {\n                // We may already have extracted the timezone offset e.g. \"11 am GMT+0900 (JST)\"\n                // - if they are equal, we also want to take the abbreviation text into result\n                // - if they are not equal, we trust the offset more\n                if (result.start.isCertain(\"timezoneOffset\")) {\n                    return;\n                }\n\n                // This is often because it's relative time with inferred timezone (e.g. in 1 hour, tomorrow)\n                // Then, we want to double-check the abbr case (e.g. \"GET\" not \"get\")\n                if (timezoneAbbr != match[1]) {\n                    return;\n                }\n            }\n\n            if (result.start.isOnlyDate()) {\n                // If the time is not explicitly mentioned,\n                // Then, we also want to double-check the abbr case (e.g. \"GET\" not \"get\")\n                if (timezoneAbbr != match[1]) {\n                    return;\n                }\n            }\n\n            result.text += match[0];\n\n            if (!result.start.isCertain(\"timezoneOffset\")) {\n                result.start.assign(\"timezoneOffset\", extractedTimezoneOffset);\n            }\n\n            if (result.end != null && !result.end.isCertain(\"timezoneOffset\")) {\n                result.end.assign(\"timezoneOffset\", extractedTimezoneOffset);\n            }\n        });\n\n        return results;\n    }\n}\n", "import { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nconst TIMEZONE_OFFSET_PATTERN = new RegExp(\"^\\\\s*(?:\\\\(?(?:GMT|UTC)\\\\s?)?([+-])(\\\\d{1,2})(?::?(\\\\d{2}))?\\\\)?\", \"i\");\nconst TIMEZONE_OFFSET_SIGN_GROUP = 1;\nconst TIMEZONE_OFFSET_HOUR_OFFSET_GROUP = 2;\nconst TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP = 3;\n\nexport default class ExtractTimezoneOffsetRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        results.forEach(function (result) {\n            if (result.start.isCertain(\"timezoneOffset\")) {\n                return;\n            }\n\n            const suffix = context.text.substring(result.index + result.text.length);\n            const match = TIMEZONE_OFFSET_PATTERN.exec(suffix);\n            if (!match) {\n                return;\n            }\n\n            context.debug(() => {\n                console.log(`Extracting timezone: '${match[0]}' into : ${result}`);\n            });\n\n            const hourOffset = parseInt(match[TIMEZONE_OFFSET_HOUR_OFFSET_GROUP]);\n            const minuteOffset = parseInt(match[TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP] || \"0\");\n            let timezoneOffset = hourOffset * 60 + minuteOffset;\n            // No timezones have offsets greater than 14 hours, so disregard this match\n            if (timezoneOffset > 14 * 60) {\n                return;\n            }\n            if (match[TIMEZONE_OFFSET_SIGN_GROUP] === \"-\") {\n                timezoneOffset = -timezoneOffset;\n            }\n\n            if (result.end != null) {\n                result.end.assign(\"timezoneOffset\", timezoneOffset);\n            }\n\n            result.start.assign(\"timezoneOffset\", timezoneOffset);\n            result.text += match[0];\n        });\n\n        return results;\n    }\n}\n", "/*\n  \n*/\n\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\n\nexport default class OverlapRemovalRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (results.length < 2) {\n            return results;\n        }\n\n        const filteredResults = [];\n        let prevResult = results[0];\n        for (let i = 1; i < results.length; i++) {\n            const result = results[i];\n            if (result.index >= prevResult.index + prevResult.text.length) {\n                filteredResults.push(prevResult);\n                prevResult = result;\n                continue;\n            }\n\n            // If overlap, compare the length and discard the shorter one\n            let kept = null;\n            let removed = null;\n            if (result.text.length > prevResult.text.length) {\n                kept = result;\n                removed = prevResult;\n            } else {\n                kept = prevResult;\n                removed = result;\n            }\n            context.debug(() => {\n                console.log(`${this.constructor.name} remove ${removed} by ${kept}`);\n            });\n            prevResult = kept;\n        }\n\n        // The last one\n        if (prevResult != null) {\n            filteredResults.push(prevResult);\n        }\n\n        return filteredResults;\n    }\n}\n", "/*\n    Enforce 'forwardDate' option to on the results. When there are missing component,\n    e.g. \"March 12-13 (without year)\" or \"Thursday\", the refiner will try to adjust the result\n    into the future instead of the past.\n*/\n\nimport { ParsingContext, Refiner } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\nimport dayjs from \"dayjs\";\nimport { implySimilarDate } from \"../../utils/dayjs\";\n\nexport default class ForwardDateRefiner implements Refiner {\n    refine(context: ParsingContext, results: ParsingResult[]): ParsingResult[] {\n        if (!context.option.forwardDate) {\n            return results;\n        }\n\n        results.forEach(function (result) {\n            let refMoment = dayjs(context.refDate);\n\n            if (result.start.isOnlyTime() && refMoment.isAfter(result.start.dayjs())) {\n                refMoment = refMoment.add(1, \"day\");\n                implySimilarDate(result.start, refMoment);\n                if (result.end && result.end.isOnlyTime()) {\n                    implySimilarDate(result.end, refMoment);\n                    if (result.start.dayjs().isAfter(result.end.dayjs())) {\n                        refMoment = refMoment.add(1, \"day\");\n                        implySimilarDate(result.end, refMoment);\n                    }\n                }\n            }\n\n            if (result.start.isOnlyWeekdayComponent() && refMoment.isAfter(result.start.dayjs())) {\n                if (refMoment.day() >= result.start.get(\"weekday\")) {\n                    refMoment = refMoment.day(result.start.get(\"weekday\") + 7);\n                } else {\n                    refMoment = refMoment.day(<number>result.start.get(\"weekday\"));\n                }\n\n                result.start.imply(\"day\", refMoment.date());\n                result.start.imply(\"month\", refMoment.month() + 1);\n                result.start.imply(\"year\", refMoment.year());\n                context.debug(() => {\n                    console.log(`Forward weekly adjusted for ${result} (${result.start})`);\n                });\n\n                if (result.end && result.end.isOnlyWeekdayComponent()) {\n                    // Adjust date to the coming week\n                    if (refMoment.day() > result.end.get(\"weekday\")) {\n                        refMoment = refMoment.day(result.end.get(\"weekday\") + 7);\n                    } else {\n                        refMoment = refMoment.day(<number>result.end.get(\"weekday\"));\n                    }\n\n                    result.end.imply(\"day\", refMoment.date());\n                    result.end.imply(\"month\", refMoment.month() + 1);\n                    result.end.imply(\"year\", refMoment.year());\n                    context.debug(() => {\n                        console.log(`Forward weekly adjusted for ${result} (${result.end})`);\n                    });\n                }\n            }\n\n            // In case where we know the month, but not which year (e.g. \"in December\", \"25th December\"),\n            // try move to another year\n            if (result.start.isDateWithUnknownYear() && refMoment.isAfter(result.start.dayjs())) {\n                for (let i = 0; i < 3 && refMoment.isAfter(result.start.dayjs()); i++) {\n                    result.start.imply(\"year\", result.start.get(\"year\") + 1);\n                    context.debug(() => {\n                        console.log(`Forward yearly adjusted for ${result} (${result.start})`);\n                    });\n\n                    if (result.end && !result.end.isCertain(\"year\")) {\n                        result.end.imply(\"year\", result.end.get(\"year\") + 1);\n                        context.debug(() => {\n                            console.log(`Forward yearly adjusted for ${result} (${result.end})`);\n                        });\n                    }\n                }\n            }\n        });\n\n        return results;\n    }\n}\n", "import { Filter } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\n\nexport default class UnlikelyFormatFilter extends Filter {\n    constructor(private strictMode: boolean) {\n        super();\n    }\n\n    isValid(context, result: ParsingResult): boolean {\n        if (result.text.replace(\" \", \"\").match(/^\\d*(\\.\\d*)?$/)) {\n            context.debug(() => {\n                console.log(`Removing unlikely result '${result.text}'`);\n            });\n\n            return false;\n        }\n\n        if (!result.start.isValidDate()) {\n            context.debug(() => {\n                console.log(`Removing invalid result: ${result} (${result.start})`);\n            });\n\n            return false;\n        }\n\n        if (result.end && !result.end.isValidDate()) {\n            context.debug(() => {\n                console.log(`Removing invalid result: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        if (this.strictMode) {\n            return this.isStrictModeValid(context, result);\n        }\n\n        return true;\n    }\n\n    private isStrictModeValid(context, result: ParsingResult) {\n        if (result.start.isOnlyWeekdayComponent()) {\n            context.debug(() => {\n                console.log(`(Strict) Removing weekday only component: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        if (result.start.isOnlyTime() && (!result.start.isCertain(\"hour\") || !result.start.isCertain(\"minute\"))) {\n            context.debug(() => {\n                console.log(`(Strict) Removing uncertain time component: ${result} (${result.end})`);\n            });\n\n            return false;\n        }\n\n        return true;\n    }\n}\n", "import { ParsingContext } from \"../../chrono\";\nimport { Component } from \"../../types\";\nimport { AbstractParserWithWordBoundaryChecking } from \"./AbstractParserWithWordBoundary\";\n\n// ISO 8601\n// http://www.w3.org/TR/NOTE-datetime\n// - YYYY-MM-DD\n// - YYYY-MM-DDThh:mmTZD\n// - YYYY-MM-DDThh:mm:ssTZD\n// - YYYY-MM-DDThh:mm:ss.sTZD\n// - TZD = (Z or +hh:mm or -hh:mm)\n\n// prettier-ignore\nconst PATTERN = new RegExp(\n    \"([0-9]{4})\\\\-([0-9]{1,2})\\\\-([0-9]{1,2})\" +\n    \"(?:T\" + //..\n        \"([0-9]{1,2}):([0-9]{1,2})\" + // hh:mm\n        \"(?:\" +\n            \":([0-9]{1,2})(?:\\\\.(\\\\d{1,4}))?\" +\n        \")?\" + // :ss.s\n        \"(?:\" +\n            \"Z|([+-]\\\\d{2}):?(\\\\d{2})?\" +\n        \")?\" + // TZD (Z or \u00B1hh:mm or \u00B1hhmm or \u00B1hh)\n    \")?\" +\n    \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst YEAR_NUMBER_GROUP = 1;\nconst MONTH_NUMBER_GROUP = 2;\nconst DATE_NUMBER_GROUP = 3;\nconst HOUR_NUMBER_GROUP = 4;\nconst MINUTE_NUMBER_GROUP = 5;\nconst SECOND_NUMBER_GROUP = 6;\nconst MILLISECOND_NUMBER_GROUP = 7;\nconst TZD_HOUR_OFFSET_GROUP = 8;\nconst TZD_MINUTE_OFFSET_GROUP = 9;\n\nexport default class ISOFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        const components: { [component in Component]?: number } = {};\n        components[\"year\"] = parseInt(match[YEAR_NUMBER_GROUP]);\n        components[\"month\"] = parseInt(match[MONTH_NUMBER_GROUP]);\n        components[\"day\"] = parseInt(match[DATE_NUMBER_GROUP]);\n\n        if (match[HOUR_NUMBER_GROUP] != null) {\n            components[\"hour\"] = parseInt(match[HOUR_NUMBER_GROUP]);\n            components[\"minute\"] = parseInt(match[MINUTE_NUMBER_GROUP]);\n\n            if (match[SECOND_NUMBER_GROUP] != null) {\n                components[\"second\"] = parseInt(match[SECOND_NUMBER_GROUP]);\n            }\n\n            if (match[MILLISECOND_NUMBER_GROUP] != null) {\n                components[\"millisecond\"] = parseInt(match[MILLISECOND_NUMBER_GROUP]);\n            }\n\n            if (match[TZD_HOUR_OFFSET_GROUP] == null) {\n                components[\"timezoneOffset\"] = 0;\n            } else {\n                const hourOffset = parseInt(match[TZD_HOUR_OFFSET_GROUP]);\n\n                let minuteOffset = 0;\n                if (match[TZD_MINUTE_OFFSET_GROUP] != null) {\n                    minuteOffset = parseInt(match[TZD_MINUTE_OFFSET_GROUP]);\n                }\n\n                let offset = hourOffset * 60;\n                if (offset < 0) {\n                    offset -= minuteOffset;\n                } else {\n                    offset += minuteOffset;\n                }\n\n                components[\"timezoneOffset\"] = offset;\n            }\n        }\n\n        return components;\n    }\n}\n", "/*\n  \n*/\n\nimport { MergingRefiner } from \"../abstractRefiners\";\nimport { ParsingResult } from \"../../results\";\n\n/**\n * Merge weekday component into more completed data\n * - [Sunday] [12/7/2014] => [Sunday 12/7/2014]\n * - [Tuesday], [January 13, 2012] => [Sunday 12/7/2014]\n */\nexport default class MergeWeekdayComponentRefiner extends MergingRefiner {\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        const newResult = nextResult.clone();\n        newResult.index = currentResult.index;\n        newResult.text = currentResult.text + textBetween + newResult.text;\n\n        newResult.start.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n        if (newResult.end) {\n            newResult.end.assign(\"weekday\", currentResult.start.get(\"weekday\"));\n        }\n\n        return newResult;\n    }\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        const weekdayThenNormalDate =\n            currentResult.start.isOnlyWeekdayComponent() &&\n            !currentResult.start.isCertain(\"hour\") &&\n            nextResult.start.isCertain(\"day\");\n        return weekdayThenNormalDate && textBetween.match(/^,?\\s*$/) != null;\n    }\n}\n", "import { Configuration, Parser, Refiner } from \"./chrono\";\n\nimport ExtractTimezoneAbbrRefiner from \"./common/refiners/ExtractTimezoneAbbrRefiner\";\nimport ExtractTimezoneOffsetRefiner from \"./common/refiners/ExtractTimezoneOffsetRefiner\";\nimport OverlapRemovalRefiner from \"./common/refiners/OverlapRemovalRefiner\";\nimport ForwardDateRefiner from \"./common/refiners/ForwardDateRefiner\";\nimport UnlikelyFormatFilter from \"./common/refiners/UnlikelyFormatFilter\";\nimport ISOFormatParser from \"./common/parsers/ISOFormatParser\";\nimport MergeWeekdayComponentRefiner from \"./common/refiners/MergeWeekdayComponentRefiner\";\n\nexport function includeCommonConfiguration(configuration: Configuration, strictMode = false): Configuration {\n    configuration.parsers.unshift(new ISOFormatParser());\n\n    configuration.refiners.unshift(new MergeWeekdayComponentRefiner());\n    configuration.refiners.unshift(new ExtractTimezoneOffsetRefiner());\n    configuration.refiners.unshift(new OverlapRemovalRefiner());\n\n    // Unlike ExtractTimezoneOffsetRefiner, this refiner relies on knowing both date and time in cases where the tz\n    // is ambiguous (in terms of DST/non-DST). It therefore needs to be applied as late as possible in the parsing.\n    configuration.refiners.push(new ExtractTimezoneAbbrRefiner());\n    configuration.refiners.push(new OverlapRemovalRefiner());\n    configuration.refiners.push(new ForwardDateRefiner());\n    configuration.refiners.push(new UnlikelyFormatFilter(strictMode));\n    return configuration;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents, ParsingResult } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { assignSimilarDate } from \"../../../utils/dayjs\";\nimport * as references from \"../../../common/casualReferences\";\n\nconst PATTERN = /(now|today|tonight|tomorrow|tmr|tmrw|yesterday|last\\s*night)(?=\\W|$)/i;\n\nexport default class ENCasualDateParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(context: ParsingContext): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents | ParsingResult {\n        let targetDate = dayjs(context.refDate);\n        const lowerText = match[0].toLowerCase();\n        let component = context.createParsingComponents();\n\n        switch (lowerText) {\n            case \"now\":\n                component = references.now(context.reference);\n                break;\n\n            case \"today\":\n                component = references.today(context.reference);\n                break;\n\n            case \"yesterday\":\n                component = references.yesterday(context.reference);\n                break;\n\n            case \"tomorrow\":\n            case \"tmr\":\n            case \"tmrw\":\n                component = references.tomorrow(context.reference);\n                break;\n\n            case \"tonight\":\n                component = references.tonight(context.reference);\n                break;\n\n            default:\n                if (lowerText.match(/last\\s*night/)) {\n                    if (targetDate.hour() > 6) {\n                        targetDate = targetDate.add(-1, \"day\");\n                    }\n\n                    assignSimilarDate(component, targetDate);\n                    component.imply(\"hour\", 0);\n                }\n                break;\n        }\n        component.addTag(\"parser/ENCasualDateParser\");\n        return component;\n    }\n}\n", "import { ParsingComponents, ReferenceWithTimezone } from \"../results\";\nimport dayjs from \"dayjs\";\nimport {\n    assignSimilarDate,\n    assignSimilarTime,\n    implySimilarDate,\n    implySimilarTime,\n    implyTheNextDay,\n} from \"../utils/dayjs\";\nimport { Meridiem } from \"../types\";\n\nexport function now(reference: ReferenceWithTimezone): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    assignSimilarDate(component, targetDate);\n    assignSimilarTime(component, targetDate);\n    if (reference.timezoneOffset !== null) {\n        component.assign(\"timezoneOffset\", targetDate.utcOffset());\n    }\n    component.addTag(\"casualReference/now\");\n    return component;\n}\n\nexport function today(reference: ReferenceWithTimezone): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    assignSimilarDate(component, targetDate);\n    implySimilarTime(component, targetDate);\n    component.addTag(\"casualReference/today\");\n    return component;\n}\n\n/**\n * The previous day. Imply the same time.\n */\nexport function yesterday(reference: ReferenceWithTimezone): ParsingComponents {\n    return theDayBefore(reference, 1).addTag(\"casualReference/yesterday\");\n}\n\nexport function theDayBefore(reference: ReferenceWithTimezone, numDay: number): ParsingComponents {\n    return theDayAfter(reference, -numDay);\n}\n\n/**\n * The following day with dayjs.assignTheNextDay()\n */\nexport function tomorrow(reference: ReferenceWithTimezone): ParsingComponents {\n    return theDayAfter(reference, 1).addTag(\"casualReference/tomorrow\");\n}\n\nexport function theDayAfter(reference: ReferenceWithTimezone, nDays: number): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    targetDate = targetDate.add(nDays, \"day\");\n    assignSimilarDate(component, targetDate);\n    implySimilarTime(component, targetDate);\n    return component;\n}\n\nexport function tonight(reference: ReferenceWithTimezone, implyHour = 22): ParsingComponents {\n    const targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    assignSimilarDate(component, targetDate);\n    component.imply(\"hour\", implyHour);\n    component.imply(\"meridiem\", Meridiem.PM);\n    component.addTag(\"casualReference/tonight\");\n    return component;\n}\n\nexport function lastNight(reference: ReferenceWithTimezone, implyHour = 0): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    if (targetDate.hour() < 6) {\n        targetDate = targetDate.add(-1, \"day\");\n    }\n    assignSimilarDate(component, targetDate);\n    component.imply(\"hour\", implyHour);\n    return component;\n}\n\nexport function evening(reference: ReferenceWithTimezone, implyHour = 20): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.PM);\n    component.imply(\"hour\", implyHour);\n    component.addTag(\"casualReference/evening\");\n    return component;\n}\n\nexport function yesterdayEvening(reference: ReferenceWithTimezone, implyHour = 20): ParsingComponents {\n    let targetDate = dayjs(reference.instant);\n    const component = new ParsingComponents(reference, {});\n    targetDate = targetDate.add(-1, \"day\");\n    assignSimilarDate(component, targetDate);\n    component.imply(\"hour\", implyHour);\n    component.imply(\"meridiem\", Meridiem.PM);\n    component.addTag(\"casualReference/yesterday\");\n    component.addTag(\"casualReference/evening\");\n    return component;\n}\n\nexport function midnight(reference: ReferenceWithTimezone): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    const targetDate = dayjs(reference.instant);\n    if (targetDate.hour() > 2) {\n        // Unless it's very early morning (0~2AM), we assume the midnight is the coming midnight.\n        // Thus, increasing the day by 1.\n        implyTheNextDay(component, targetDate);\n    }\n    component.assign(\"hour\", 0);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    component.imply(\"millisecond\", 0);\n    component.addTag(\"casualReference/midnight\");\n    return component;\n}\n\nexport function morning(reference: ReferenceWithTimezone, implyHour = 6): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.AM);\n    component.imply(\"hour\", implyHour);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    component.imply(\"millisecond\", 0);\n    component.addTag(\"casualReference/morning\");\n    return component;\n}\n\nexport function afternoon(reference: ReferenceWithTimezone, implyHour = 15): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.PM);\n    component.imply(\"hour\", implyHour);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    component.imply(\"millisecond\", 0);\n    component.addTag(\"casualReference/afternoon\");\n    return component;\n}\n\nexport function noon(reference: ReferenceWithTimezone): ParsingComponents {\n    const component = new ParsingComponents(reference, {});\n    component.imply(\"meridiem\", Meridiem.AM);\n    component.imply(\"hour\", 12);\n    component.imply(\"minute\", 0);\n    component.imply(\"second\", 0);\n    component.imply(\"millisecond\", 0);\n    component.addTag(\"casualReference/noon\");\n    return component;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport * as casualReferences from \"../../../common/casualReferences\";\n\nconst PATTERN = /(?:this)?\\s{0,3}(morning|afternoon|evening|night|midnight|midday|noon)(?=\\W|$)/i;\n\nexport default class ENCasualTimeParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern() {\n        return PATTERN;\n    }\n    innerExtract(context: ParsingContext, match: RegExpMatchArray) {\n        let component = null;\n        switch (match[1].toLowerCase()) {\n            case \"afternoon\":\n                component = casualReferences.afternoon(context.reference);\n                break;\n            case \"evening\":\n            case \"night\":\n                component = casualReferences.evening(context.reference);\n                break;\n            case \"midnight\":\n                component = casualReferences.midnight(context.reference);\n                break;\n            case \"morning\":\n                component = casualReferences.morning(context.reference);\n                break;\n            case \"noon\":\n            case \"midday\":\n                component = casualReferences.noon(context.reference);\n                break;\n        }\n        if (component) {\n            component.addTag(\"parser/ENCasualTimeParser\");\n        }\n        return component;\n    }\n}\n", "import { Weekday } from \"../../types\";\nimport { ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { addImpliedTimeUnits } from \"../../utils/timeunits\";\n\n/**\n * Returns the parsing components at the weekday (considering the modifier). The time and timezone is assume to be\n * similar to the reference.\n * @param reference\n * @param weekday\n * @param modifier \"this\", \"next\", \"last\" modifier word. If empty, returns the weekday closest to the `refDate`.\n */\nexport function createParsingComponentsAtWeekday(\n    reference: ReferenceWithTimezone,\n    weekday: Weekday,\n    modifier?: \"this\" | \"next\" | \"last\"\n): ParsingComponents {\n    const refDate = reference.getDateWithAdjustedTimezone();\n    const daysToWeekday = getDaysToWeekday(refDate, weekday, modifier);\n\n    let components = new ParsingComponents(reference);\n    components = addImpliedTimeUnits(components, { \"day\": daysToWeekday });\n    components.assign(\"weekday\", weekday);\n\n    return components;\n}\n\n/**\n * Returns number of days from refDate to the weekday. The refDate date and timezone information is used.\n * @param refDate\n * @param weekday\n * @param modifier \"this\", \"next\", \"last\" modifier word. If empty, returns the weekday closest to the `refDate`.\n */\nexport function getDaysToWeekday(refDate: Date, weekday: Weekday, modifier?: \"this\" | \"next\" | \"last\"): number {\n    const refWeekday = refDate.getDay() as Weekday;\n    switch (modifier) {\n        case \"this\":\n            return getDaysForwardToWeekday(refDate, weekday);\n        case \"last\":\n            return getBackwardDaysToWeekday(refDate, weekday);\n        case \"next\":\n            // From Sunday, the next Sunday is 7 days later.\n            // Otherwise, next Mon is 1 days later, next Tues is 2 days later, and so on..., (return enum value)\n            if (refWeekday == Weekday.SUNDAY) {\n                return weekday == Weekday.SUNDAY ? 7 : weekday;\n            }\n            // From Saturday, the next Saturday is 7 days later, the next Sunday is 8-days later.\n            // Otherwise, next Mon is (1 + 1) days later, next Tues is (1 + 2) days later, and so on...,\n            // (return, 2 + [enum value] days)\n            if (refWeekday == Weekday.SATURDAY) {\n                if (weekday == Weekday.SATURDAY) return 7;\n                if (weekday == Weekday.SUNDAY) return 8;\n                return 1 + weekday;\n            }\n            // From weekdays, next Mon is the following week's Mon, next Tues the following week's Tues, and so on...\n            // If the week's weekday already passed (weekday < refWeekday), we simply count forward to next week\n            // (similar to 'this'). Otherwise, count forward to this week, then add another 7 days.\n            if (weekday < refWeekday && weekday != Weekday.SUNDAY) {\n                return getDaysForwardToWeekday(refDate, weekday);\n            } else {\n                return getDaysForwardToWeekday(refDate, weekday) + 7;\n            }\n    }\n    return getDaysToWeekdayClosest(refDate, weekday);\n}\n\nexport function getDaysToWeekdayClosest(refDate: Date, weekday: Weekday): number {\n    const backward = getBackwardDaysToWeekday(refDate, weekday);\n    const forward = getDaysForwardToWeekday(refDate, weekday);\n\n    return forward < -backward ? forward : backward;\n}\n\nexport function getDaysForwardToWeekday(refDate: Date, weekday: Weekday): number {\n    const refWeekday = refDate.getDay();\n    let forwardCount = weekday - refWeekday;\n    if (forwardCount < 0) {\n        forwardCount += 7;\n    }\n    return forwardCount;\n}\n\nexport function getBackwardDaysToWeekday(refDate: Date, weekday: Weekday): number {\n    const refWeekday = refDate.getDay();\n    let backwardCount = weekday - refWeekday;\n    if (backwardCount >= 0) {\n        backwardCount -= 7;\n    }\n    return backwardCount;\n}\n", "import { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { WEEKDAY_DICTIONARY } from \"../constants\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { createParsingComponentsAtWeekday } from \"../../../common/calculation/weekdays\";\n\nconst PATTERN = new RegExp(\n    \"(?:(?:\\\\,|\\\\(|\\\\\uFF08)\\\\s*)?\" +\n        \"(?:on\\\\s*?)?\" +\n        \"(?:(this|last|past|next)\\\\s*)?\" +\n        `(${matchAnyPattern(WEEKDAY_DICTIONARY)})` +\n        \"(?:\\\\s*(?:\\\\,|\\\\)|\\\\\uFF09))?\" +\n        \"(?:\\\\s*(this|last|past|next)\\\\s*week)?\" +\n        \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst PREFIX_GROUP = 1;\nconst WEEKDAY_GROUP = 2;\nconst POSTFIX_GROUP = 3;\n\nexport default class ENWeekdayParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const dayOfWeek = match[WEEKDAY_GROUP].toLowerCase();\n        const weekday = WEEKDAY_DICTIONARY[dayOfWeek];\n        const prefix = match[PREFIX_GROUP];\n        const postfix = match[POSTFIX_GROUP];\n        let modifierWord = prefix || postfix;\n        modifierWord = modifierWord || \"\";\n        modifierWord = modifierWord.toLowerCase();\n\n        let modifier = null;\n        if (modifierWord == \"last\" || modifierWord == \"past\") {\n            modifier = \"last\";\n        } else if (modifierWord == \"next\") {\n            modifier = \"next\";\n        } else if (modifierWord == \"this\") {\n            modifier = \"this\";\n        }\n\n        return createParsingComponentsAtWeekday(context.reference, weekday, modifier);\n    }\n}\n", "import { TIME_UNIT_DICTIONARY } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport dayjs from \"dayjs\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { matchAnyPattern } from \"../../../utils/pattern\";\n\nconst PATTERN = new RegExp(\n    `(this|last|past|next|after\\\\s*this)\\\\s*(${matchAnyPattern(TIME_UNIT_DICTIONARY)})(?=\\\\s*)` + \"(?=\\\\W|$)\",\n    \"i\"\n);\n\nconst MODIFIER_WORD_GROUP = 1;\nconst RELATIVE_WORD_GROUP = 2;\n\nexport default class ENRelativeDateFormatParser extends AbstractParserWithWordBoundaryChecking {\n    innerPattern(): RegExp {\n        return PATTERN;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const modifier = match[MODIFIER_WORD_GROUP].toLowerCase();\n        const unitWord = match[RELATIVE_WORD_GROUP].toLowerCase();\n        const timeunit = TIME_UNIT_DICTIONARY[unitWord];\n\n        if (modifier == \"next\" || modifier.startsWith(\"after\")) {\n            const timeUnits = {};\n            timeUnits[timeunit] = 1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        if (modifier == \"last\" || modifier == \"past\") {\n            const timeUnits = {};\n            timeUnits[timeunit] = -1;\n            return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n        }\n\n        const components = context.createParsingComponents();\n        let date = dayjs(context.reference.instant);\n\n        // This week\n        if (unitWord.match(/week/i)) {\n            date = date.add(-date.get(\"d\"), \"d\");\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.imply(\"year\", date.year());\n        }\n\n        // This month\n        else if (unitWord.match(/month/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            components.imply(\"day\", date.date());\n            components.assign(\"year\", date.year());\n            components.assign(\"month\", date.month() + 1);\n        }\n\n        // This year\n        else if (unitWord.match(/year/i)) {\n            date = date.add(-date.date() + 1, \"d\");\n            date = date.add(-date.month(), \"month\");\n\n            components.imply(\"day\", date.date());\n            components.imply(\"month\", date.month() + 1);\n            components.assign(\"year\", date.year());\n        }\n\n        return components;\n    }\n}\n", "import { Parser, ParsingContext } from \"../../chrono\";\nimport { ParsingResult } from \"../../results\";\nimport { findMostLikelyADYear, findYearClosestToRef } from \"../../calculation/years\";\n\n/**\n * Date format with slash \"/\" (or dot \".\") between numbers.\n * For examples:\n * - 7/10\n * - 7/12/2020\n * - 7.12.2020\n */\nconst PATTERN = new RegExp(\n    \"([^\\\\d]|^)\" +\n        \"([0-3]{0,1}[0-9]{1})[\\\\/\\\\.\\\\-]([0-3]{0,1}[0-9]{1})\" +\n        \"(?:[\\\\/\\\\.\\\\-]([0-9]{4}|[0-9]{2}))?\" +\n        \"(\\\\W|$)\",\n    \"i\"\n);\n\nconst OPENING_GROUP = 1;\nconst ENDING_GROUP = 5;\n\nconst FIRST_NUMBERS_GROUP = 2;\nconst SECOND_NUMBERS_GROUP = 3;\n\nconst YEAR_GROUP = 4;\n\nexport default class SlashDateFormatParser implements Parser {\n    groupNumberMonth: number;\n    groupNumberDay: number;\n\n    constructor(littleEndian: boolean) {\n        this.groupNumberMonth = littleEndian ? SECOND_NUMBERS_GROUP : FIRST_NUMBERS_GROUP;\n        this.groupNumberDay = littleEndian ? FIRST_NUMBERS_GROUP : SECOND_NUMBERS_GROUP;\n    }\n\n    pattern(): RegExp {\n        return PATTERN;\n    }\n\n    extract(context: ParsingContext, match: RegExpMatchArray): ParsingResult {\n        // Because of how pattern is executed on remaining text in `chrono.ts`, the character before the match could\n        // still be a number (e.g. X[X/YY/ZZ] or XX[/YY/ZZ] or [XX/YY/]ZZ). We want to check and skip them.\n        if (match[OPENING_GROUP].length == 0 && match.index > 0 && match.index < context.text.length) {\n            const previousChar = context.text[match.index - 1];\n            if (previousChar >= \"0\" && previousChar <= \"9\") {\n                return;\n            }\n        }\n\n        const index = match.index + match[OPENING_GROUP].length;\n        const text = match[0].substr(\n            match[OPENING_GROUP].length,\n            match[0].length - match[OPENING_GROUP].length - match[ENDING_GROUP].length\n        );\n\n        // '1.12', '1.12.12' is more like a version numbers\n        if (text.match(/^\\d\\.\\d$/) || text.match(/^\\d\\.\\d{1,2}\\.\\d{1,2}\\s*$/)) {\n            return;\n        }\n\n        // MM/dd -> OK\n        // MM.dd -> NG\n        if (!match[YEAR_GROUP] && match[0].indexOf(\"/\") < 0) {\n            return;\n        }\n\n        const result = context.createParsingResult(index, text);\n        let month = parseInt(match[this.groupNumberMonth]);\n        let day = parseInt(match[this.groupNumberDay]);\n\n        if (month < 1 || month > 12) {\n            if (month > 12) {\n                if (day >= 1 && day <= 12 && month <= 31) {\n                    [day, month] = [month, day];\n                } else {\n                    return null;\n                }\n            }\n        }\n\n        if (day < 1 || day > 31) {\n            return null;\n        }\n\n        result.start.assign(\"day\", day);\n        result.start.assign(\"month\", month);\n\n        if (match[YEAR_GROUP]) {\n            const rawYearNumber = parseInt(match[YEAR_GROUP]);\n            const year = findMostLikelyADYear(rawYearNumber);\n            result.start.assign(\"year\", year);\n        } else {\n            const year = findYearClosestToRef(context.refDate, day, month);\n            result.start.imply(\"year\", year);\n        }\n\n        return result;\n    }\n}\n", "import { TIME_UNITS_PATTERN, parseTimeUnits, TIME_UNITS_NO_ABBR_PATTERN } from \"../constants\";\nimport { ParsingContext } from \"../../../chrono\";\nimport { ParsingComponents } from \"../../../results\";\nimport { AbstractParserWithWordBoundaryChecking } from \"../../../common/parsers/AbstractParserWithWordBoundary\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nconst PATTERN = new RegExp(`(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_PATTERN})(?=\\\\W|$)`, \"i\");\nconst PATTERN_NO_ABBR = new RegExp(\n    `(this|last|past|next|after|\\\\+|-)\\\\s*(${TIME_UNITS_NO_ABBR_PATTERN})(?=\\\\W|$)`,\n    \"i\"\n);\n\nexport default class ENTimeUnitCasualRelativeFormatParser extends AbstractParserWithWordBoundaryChecking {\n    constructor(private allowAbbreviations: boolean = true) {\n        super();\n    }\n\n    innerPattern(): RegExp {\n        return this.allowAbbreviations ? PATTERN : PATTERN_NO_ABBR;\n    }\n\n    innerExtract(context: ParsingContext, match: RegExpMatchArray): ParsingComponents {\n        const prefix = match[1].toLowerCase();\n        let timeUnits = parseTimeUnits(match[2]);\n        switch (prefix) {\n            case \"last\":\n            case \"past\":\n            case \"-\":\n                timeUnits = reverseTimeUnits(timeUnits);\n                break;\n        }\n\n        return ParsingComponents.createRelativeFromReference(context.reference, timeUnits);\n    }\n}\n", "import { MergingRefiner } from \"../../../common/abstractRefiners\";\nimport { ParsingComponents, ParsingResult, ReferenceWithTimezone } from \"../../../results\";\nimport { parseTimeUnits } from \"../constants\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nfunction IsPositiveFollowingReference(result: ParsingResult): boolean {\n    return result.text.match(/^[+-]/i) != null;\n}\n\nfunction IsNegativeFollowingReference(result: ParsingResult): boolean {\n    return result.text.match(/^-/i) != null;\n}\n\n/**\n * Merges a relative data/time that comes after an absolute date.\n * - [2020-02-13] [+2 weeks]\n * - [next tuesday] [+10 days]\n */\nexport default class ENMergeRelativeAfterDateRefiner extends MergingRefiner {\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        if (!textBetween.match(/^\\s*$/i)) {\n            return false;\n        }\n\n        return IsPositiveFollowingReference(nextResult) || IsNegativeFollowingReference(nextResult);\n    }\n\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult, context): ParsingResult {\n        let timeUnits = parseTimeUnits(nextResult.text);\n        if (IsNegativeFollowingReference(nextResult)) {\n            timeUnits = reverseTimeUnits(timeUnits);\n        }\n\n        const components = ParsingComponents.createRelativeFromReference(\n            new ReferenceWithTimezone(currentResult.start.date()),\n            timeUnits\n        );\n\n        return new ParsingResult(\n            currentResult.reference,\n            currentResult.index,\n            `${currentResult.text}${textBetween}${nextResult.text}`,\n            components\n        );\n    }\n}\n", "import { MergingRefiner } from \"../../../common/abstractRefiners\";\nimport { ParsingComponents, ParsingResult, ReferenceWithTimezone } from \"../../../results\";\nimport { parseTimeUnits } from \"../constants\";\nimport { reverseTimeUnits } from \"../../../utils/timeunits\";\n\nfunction hasImpliedEarlierReferenceDate(result: ParsingResult): boolean {\n    return result.text.match(/\\s+(before|from)$/i) != null;\n}\n\nfunction hasImpliedLaterReferenceDate(result: ParsingResult): boolean {\n    return result.text.match(/\\s+(after|since)$/i) != null;\n}\n\n/**\n * Merges a relative data/time that follow by an absolute date.\n * - [2 weeks before] [2020-02-13]\n * - [2 days after] [next Friday]\n */\nexport default class ENMergeRelativeFollowByDateRefiner extends MergingRefiner {\n    patternBetween(): RegExp {\n        return /^\\s*$/i;\n    }\n\n    shouldMergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): boolean {\n        // Dates need to be next to each other to get merged\n        if (!textBetween.match(this.patternBetween())) {\n            return false;\n        }\n\n        // Check if any relative tokens were swallowed by the first date.\n        // E.g. [<relative_date1> from] [<date2>]\n        if (!hasImpliedEarlierReferenceDate(currentResult) && !hasImpliedLaterReferenceDate(currentResult)) {\n            return false;\n        }\n\n        // make sure that <date2> implies an absolute date\n        return !!nextResult.start.get(\"day\") && !!nextResult.start.get(\"month\") && !!nextResult.start.get(\"year\");\n    }\n\n    mergeResults(textBetween: string, currentResult: ParsingResult, nextResult: ParsingResult): ParsingResult {\n        let timeUnits = parseTimeUnits(currentResult.text);\n        if (hasImpliedEarlierReferenceDate(currentResult)) {\n            timeUnits = reverseTimeUnits(timeUnits);\n        }\n\n        const components = ParsingComponents.createRelativeFromReference(\n            new ReferenceWithTimezone(nextResult.start.date()),\n            timeUnits\n        );\n\n        return new ParsingResult(\n            nextResult.reference,\n            currentResult.index,\n            `${currentResult.text}${textBetween}${nextResult.text}`,\n            components\n        );\n    }\n}\n", "import { Configuration } from \"../../chrono\";\n\nimport ENTimeUnitWithinFormatParser from \"./parsers/ENTimeUnitWithinFormatParser\";\nimport ENMonthNameLittleEndianParser from \"./parsers/ENMonthNameLittleEndianParser\";\nimport ENMonthNameMiddleEndianParser from \"./parsers/ENMonthNameMiddleEndianParser\";\nimport ENMonthNameParser from \"./parsers/ENMonthNameParser\";\nimport ENCasualYearMonthDayParser from \"./parsers/ENCasualYearMonthDayParser\";\nimport ENSlashMonthFormatParser from \"./parsers/ENSlashMonthFormatParser\";\nimport ENTimeExpressionParser from \"./parsers/ENTimeExpressionParser\";\nimport ENTimeUnitAgoFormatParser from \"./parsers/ENTimeUnitAgoFormatParser\";\nimport ENTimeUnitLaterFormatParser from \"./parsers/ENTimeUnitLaterFormatParser\";\nimport ENMergeDateRangeRefiner from \"./refiners/ENMergeDateRangeRefiner\";\nimport ENMergeDateTimeRefiner from \"./refiners/ENMergeDateTimeRefiner\";\n\nimport { includeCommonConfiguration } from \"../../configurations\";\nimport ENCasualDateParser from \"./parsers/ENCasualDateParser\";\nimport ENCasualTimeParser from \"./parsers/ENCasualTimeParser\";\nimport ENWeekdayParser from \"./parsers/ENWeekdayParser\";\nimport ENRelativeDateFormatParser from \"./parsers/ENRelativeDateFormatParser\";\n\nimport SlashDateFormatParser from \"../../common/parsers/SlashDateFormatParser\";\nimport ENTimeUnitCasualRelativeFormatParser from \"./parsers/ENTimeUnitCasualRelativeFormatParser\";\nimport ENMergeRelativeAfterDateRefiner from \"./refiners/ENMergeRelativeAfterDateRefiner\";\nimport ENMergeRelativeFollowByDateRefiner from \"./refiners/ENMergeRelativeFollowByDateRefiner\";\nimport OverlapRemovalRefiner from \"../../common/refiners/OverlapRemovalRefiner\";\n\nexport default class ENDefaultConfiguration {\n    /**\n     * Create a default *casual* {@Link Configuration} for English chrono.\n     * It calls {@Link createConfiguration} and includes additional parsers.\n     */\n    createCasualConfiguration(littleEndian = false): Configuration {\n        const option = this.createConfiguration(false, littleEndian);\n        option.parsers.push(new ENCasualDateParser());\n        option.parsers.push(new ENCasualTimeParser());\n        option.parsers.push(new ENMonthNameParser());\n        option.parsers.push(new ENRelativeDateFormatParser());\n        option.parsers.push(new ENTimeUnitCasualRelativeFormatParser());\n        return option;\n    }\n\n    /**\n     * Create a default {@Link Configuration} for English chrono\n     *\n     * @param strictMode If the timeunit mentioning should be strict, not casual\n     * @param littleEndian If format should be date-first/littleEndian (e.g. en_UK), not month-first/middleEndian (e.g. en_US)\n     */\n    createConfiguration(strictMode = true, littleEndian = false): Configuration {\n        const options = includeCommonConfiguration(\n            {\n                parsers: [\n                    new SlashDateFormatParser(littleEndian),\n                    new ENTimeUnitWithinFormatParser(strictMode),\n                    new ENMonthNameLittleEndianParser(),\n                    new ENMonthNameMiddleEndianParser(/*shouldSkipYearLikeDate=*/ littleEndian),\n                    new ENWeekdayParser(),\n                    new ENCasualYearMonthDayParser(),\n                    new ENSlashMonthFormatParser(),\n                    new ENTimeExpressionParser(strictMode),\n                    new ENTimeUnitAgoFormatParser(strictMode),\n                    new ENTimeUnitLaterFormatParser(strictMode),\n                ],\n                refiners: [new ENMergeDateTimeRefiner()],\n            },\n            strictMode\n        );\n        // These relative-dates consideration should be done before other common refiners.\n        options.refiners.unshift(new ENMergeRelativeFollowByDateRefiner());\n        options.refiners.unshift(new ENMergeRelativeAfterDateRefiner());\n        options.refiners.unshift(new OverlapRemovalRefiner());\n\n        // Re-apply the date time refiner again after the timezone refinement and exclusion in common refiners.\n        options.refiners.push(new ENMergeDateTimeRefiner());\n        // Keep the date range refiner at the end (after all other refinements).\n        options.refiners.push(new ENMergeDateRangeRefiner());\n        return options;\n    }\n}\n", "import { ReferenceWithTimezone, ParsingComponents, ParsingResult } from \"./results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference } from \"./types\";\nimport { AsyncDebugBlock, DebugHandler } from \"./debugging\";\nimport ENDefaultConfiguration from \"./locales/en/configuration\";\n\n/**\n * Chrono configuration.\n * It is simply an ordered list of parsers and refiners\n */\nexport interface Configuration {\n    parsers: Parser[];\n    refiners: Refiner[];\n}\n\n/**\n * An abstraction for Chrono *Parser*.\n *\n * Each parser should recognize and handle a certain date format.\n * Chrono uses multiple parses (and refiners) together for parsing the input.\n *\n * The parser implementation must provide {@Link pattern | pattern()} for the date format.\n *\n * The {@Link extract | extract()} method is called with the pattern's *match*.\n * The matching and extracting is controlled and adjusted to avoid for overlapping results.\n */\nexport interface Parser {\n    pattern(context: ParsingContext): RegExp;\n    extract(\n        context: ParsingContext,\n        match: RegExpMatchArray\n    ): ParsingComponents | ParsingResult | { [c in Component]?: number } | null;\n}\n\n/**\n * A abstraction for Chrono *Refiner*.\n *\n * Each refiner takes the list of results (from parsers or other refiners) and returns another list of results.\n * Chrono applies each refiner in order and return the output from the last refiner.\n */\nexport interface Refiner {\n    refine: (context: ParsingContext, results: ParsingResult[]) => ParsingResult[];\n}\n\n/**\n * The Chrono object.\n */\nexport class Chrono {\n    parsers: Array<Parser>;\n    refiners: Array<Refiner>;\n\n    defaultConfig = new ENDefaultConfiguration();\n\n    constructor(configuration?: Configuration) {\n        configuration = configuration || this.defaultConfig.createCasualConfiguration();\n        this.parsers = [...configuration.parsers];\n        this.refiners = [...configuration.refiners];\n    }\n\n    /**\n     * Create a shallow copy of the Chrono object with the same configuration (`parsers` and `refiners`)\n     */\n    clone(): Chrono {\n        return new Chrono({\n            parsers: [...this.parsers],\n            refiners: [...this.refiners],\n        });\n    }\n\n    /**\n     * A shortcut for calling {@Link parse | parse() } then transform the result into Javascript's Date object\n     * @return Date object created from the first parse result\n     */\n    parseDate(text: string, referenceDate?: ParsingReference | Date, option?: ParsingOption): Date | null {\n        const results = this.parse(text, referenceDate, option);\n        return results.length > 0 ? results[0].start.date() : null;\n    }\n\n    parse(text: string, referenceDate?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n        const context = new ParsingContext(text, referenceDate, option);\n\n        let results = [];\n        this.parsers.forEach((parser) => {\n            const parsedResults = Chrono.executeParser(context, parser);\n            results = results.concat(parsedResults);\n        });\n\n        results.sort((a, b) => {\n            return a.index - b.index;\n        });\n\n        this.refiners.forEach(function (refiner) {\n            results = refiner.refine(context, results);\n        });\n\n        return results;\n    }\n\n    private static executeParser(context: ParsingContext, parser: Parser) {\n        const results = [];\n        const pattern = parser.pattern(context);\n\n        const originalText = context.text;\n        let remainingText = context.text;\n        let match = pattern.exec(remainingText);\n\n        while (match) {\n            // Calculate match index on the full text;\n            const index = match.index + originalText.length - remainingText.length;\n            match.index = index;\n\n            const result = parser.extract(context, match);\n            if (!result) {\n                // If fails, move on by 1\n                remainingText = originalText.substring(match.index + 1);\n                match = pattern.exec(remainingText);\n                continue;\n            }\n\n            let parsedResult: ParsingResult = null;\n            if (result instanceof ParsingResult) {\n                parsedResult = result;\n            } else if (result instanceof ParsingComponents) {\n                parsedResult = context.createParsingResult(match.index, match[0]);\n                parsedResult.start = result;\n            } else {\n                parsedResult = context.createParsingResult(match.index, match[0], result);\n            }\n\n            const parsedIndex = parsedResult.index;\n            const parsedText = parsedResult.text;\n            context.debug(() =>\n                console.log(`${parser.constructor.name} extracted (at index=${parsedIndex}) '${parsedText}'`)\n            );\n\n            results.push(parsedResult);\n            remainingText = originalText.substring(parsedIndex + parsedText.length);\n            match = pattern.exec(remainingText);\n        }\n\n        return results;\n    }\n}\n\nexport class ParsingContext implements DebugHandler {\n    readonly text: string;\n    readonly option: ParsingOption;\n    readonly reference: ReferenceWithTimezone;\n\n    /**\n     * @deprecated. Use `reference.instant` instead.\n     */\n    readonly refDate: Date;\n\n    constructor(text: string, refDate?: ParsingReference | Date, option?: ParsingOption) {\n        this.text = text;\n        this.reference = new ReferenceWithTimezone(refDate);\n        this.option = option ?? {};\n\n        this.refDate = this.reference.instant;\n    }\n\n    createParsingComponents(components?: { [c in Component]?: number } | ParsingComponents): ParsingComponents {\n        if (components instanceof ParsingComponents) {\n            return components;\n        }\n\n        return new ParsingComponents(this.reference, components);\n    }\n\n    createParsingResult(\n        index: number,\n        textOrEndIndex: number | string,\n        startComponents?: { [c in Component]?: number } | ParsingComponents,\n        endComponents?: { [c in Component]?: number } | ParsingComponents\n    ): ParsingResult {\n        const text = typeof textOrEndIndex === \"string\" ? textOrEndIndex : this.text.substring(index, textOrEndIndex);\n\n        const start = startComponents ? this.createParsingComponents(startComponents) : null;\n        const end = endComponents ? this.createParsingComponents(endComponents) : null;\n\n        return new ParsingResult(this.reference, index, text, start, end);\n    }\n\n    debug(block: AsyncDebugBlock): void {\n        if (this.option.debug) {\n            if (this.option.debug instanceof Function) {\n                this.option.debug(block);\n            } else {\n                const handler: DebugHandler = <DebugHandler>this.option.debug;\n                handler.debug(block);\n            }\n        }\n    }\n}\n", "/**\n * Chrono components for English support (*parsers*, *refiners*, and *configuration*)\n *\n * @module\n */\n\nimport { Chrono, Parser, Refiner } from \"../../chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"../../results\";\nimport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"../../types\";\n\nimport ENDefaultConfiguration from \"./configuration\";\n\nexport { Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\nexport const configuration = new ENDefaultConfiguration();\n\n/**\n * Chrono object configured for parsing *casual* English\n */\nexport const casual = new Chrono(configuration.createCasualConfiguration(false));\n\n/**\n * Chrono object configured for parsing *strict* English\n */\nexport const strict = new Chrono(configuration.createConfiguration(true, false));\n\n/**\n * Chrono object configured for parsing *UK-style* English\n */\nexport const GB = new Chrono(configuration.createCasualConfiguration(true));\n\n/**\n * A shortcut for en.casual.parse()\n */\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for en.casual.parseDate()\n */\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date {\n    return casual.parseDate(text, ref, option);\n}\n", "import * as en from \"./locales/en\";\nimport { Chrono, Parser, Refiner } from \"./chrono\";\nimport { ParsingResult, ParsingComponents, ReferenceWithTimezone } from \"./results\";\nimport { Component, ParsedComponents, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday } from \"./types\";\n\nexport { en, Chrono, Parser, Refiner, ParsingResult, ParsingComponents, ReferenceWithTimezone };\nexport { Component, ParsedComponents, ParsedResult, ParsingOption, ParsingReference, Meridiem, Weekday };\n\n// Export all locales\nimport * as de from \"./locales/de\";\nimport * as fr from \"./locales/fr\";\nimport * as ja from \"./locales/ja\";\nimport * as pt from \"./locales/pt\";\nimport * as nl from \"./locales/nl\";\nimport * as zh from \"./locales/zh\";\nimport * as ru from \"./locales/ru\";\nimport * as es from \"./locales/es\";\nimport * as uk from \"./locales/uk\";\n\nexport { de, fr, ja, pt, nl, zh, ru, es, uk };\n\n/**\n * A shortcut for {@link en | chrono.en.strict}\n */\nexport const strict = en.strict;\n\n/**\n * A shortcut for {@link en | chrono.en.casual}\n */\nexport const casual = en.casual;\n\n/**\n * A shortcut for {@link en | chrono.en.casual.parse()}\n */\nexport function parse(text: string, ref?: ParsingReference | Date, option?: ParsingOption): ParsedResult[] {\n    return casual.parse(text, ref, option);\n}\n\n/**\n * A shortcut for {@link en | chrono.en.casual.parseDate()}\n */\nexport function parseDate(text: string, ref?: ParsingReference | Date, option?: ParsingOption): Date | null {\n    return casual.parseDate(text, ref, option);\n}\n", "/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n", "/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from 'date-fns'\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use contrustor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   )\n * }\n */\nexport function constructFrom(date, value) {\n  if (date instanceof Date) {\n    return new date.constructor(value);\n  } else {\n    return new Date(value);\n  }\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n", "import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;\n", "import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount) {\n  const _date = toDate(date);\n  if (isNaN(amount)) return constructFrom(date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(\n      endOfDesiredMonth.getFullYear(),\n      endOfDesiredMonth.getMonth(),\n      dayOfMonth,\n    );\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;\n", "import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount) {\n  const timestamp = +toDate(date);\n  return constructFrom(date, timestamp + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n", "/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n", "import { addMilliseconds } from \"./addMilliseconds.mjs\";\nimport { millisecondsInHour } from \"./constants.mjs\";\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added.\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount) {\n  return addMilliseconds(date, amount * millisecondsInHour);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n", "let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n", "import { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeek} function options.\n */\n\n/**\n * @name startOfWeek\n * @category Week Helpers\n * @summary Return the start of a week for the given date.\n *\n * @description\n * Return the start of a week for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week\n *\n * @example\n * // The start of a week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Sun Aug 31 2014 00:00:00\n *\n * @example\n * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:\n * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfWeek(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const _date = toDate(date);\n  const day = _date.getDay();\n  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n\n  _date.setDate(_date.getDate() - diff);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeek;\n", "import { startOfWeek } from \"./startOfWeek.mjs\";\n\n/**\n * @name startOfISOWeek\n * @category ISO Week Helpers\n * @summary Return the start of an ISO week for the given date.\n *\n * @description\n * Return the start of an ISO week for the given date.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week\n *\n * @example\n * // The start of an ISO week for 2 September 2014 11:55:00:\n * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\nexport function startOfISOWeek(date) {\n  return startOfWeek(date, { weekStartsOn: 1 });\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeek;\n", "import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Get the ISO week-numbering year of the given date.\n *\n * @description\n * Get the ISO week-numbering year of the given date,\n * which always starts 3 days before the year's first Thursday.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week-numbering year\n *\n * @example\n * // Which ISO-week numbering year is 2 January 2005?\n * const result = getISOWeekYear(new Date(2005, 0, 2))\n * //=> 2004\n */\nexport function getISOWeekYear(date) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const fourthOfJanuaryOfNextYear = constructFrom(date, 0);\n  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);\n\n  const fourthOfJanuaryOfThisYear = constructFrom(date, 0);\n  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getISOWeekYear;\n", "import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;\n", "import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n", "import { millisecondsInDay } from \"./constants.mjs\";\nimport { startOfDay } from \"./startOfDay.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(dateLeft, dateRight) {\n  const startOfDayLeft = startOfDay(dateLeft);\n  const startOfDayRight = startOfDay(dateRight);\n\n  const timestampLeft =\n    +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  const timestampRight =\n    +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((timestampLeft - timestampRight) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;\n", "import { getISOWeekYear } from \"./getISOWeekYear.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfISOWeekYear\n * @category ISO Week-Numbering Year Helpers\n * @summary Return the start of an ISO week-numbering year for the given date.\n *\n * @description\n * Return the start of an ISO week-numbering year,\n * which always starts 3 days before the year's first Thursday.\n * The result will be in the local timezone.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of an ISO week-numbering year\n *\n * @example\n * // The start of an ISO week-numbering year for 2 July 2005:\n * const result = startOfISOWeekYear(new Date(2005, 6, 2))\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfISOWeekYear(date) {\n  const year = getISOWeekYear(date);\n  const fourthOfJanuary = constructFrom(date, 0);\n  fourthOfJanuary.setFullYear(year, 0, 4);\n  fourthOfJanuary.setHours(0, 0, 0, 0);\n  return startOfISOWeek(fourthOfJanuary);\n}\n\n// Fallback for modularized imports:\nexport default startOfISOWeekYear;\n", "import { addMonths } from \"./addMonths.mjs\";\n\n/**\n * @name addYears\n * @category Year Helpers\n * @summary Add the specified number of years to the given date.\n *\n * @description\n * Add the specified number of years to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of years to be added.\n *\n * @returns The new date with the years added\n *\n * @example\n * // Add 5 years to 1 September 2014:\n * const result = addYears(new Date(2014, 8, 1), 5)\n * //=> Sun Sep 01 2019 00:00:00\n */\nexport function addYears(date, amount) {\n  return addMonths(date, amount * 12);\n}\n\n// Fallback for modularized imports:\nexport default addYears;\n", "/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * @param value - The value to check\n *\n * @returns True if the given value is a date\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\nexport function isDate(value) {\n  return (\n    value instanceof Date ||\n    (typeof value === \"object\" &&\n      Object.prototype.toString.call(value) === \"[object Date]\")\n  );\n}\n\n// Fallback for modularized imports:\nexport default isDate;\n", "import { isDate } from \"./isDate.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n *\n * @returns The date is valid\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\nexport function isValid(date) {\n  if (!isDate(date) && typeof date !== \"number\") {\n    return false;\n  }\n  const _date = toDate(date);\n  return !isNaN(Number(_date));\n}\n\n// Fallback for modularized imports:\nexport default isValid;\n", "import { toDate } from \"./toDate.mjs\";\nimport { constructFrom } from \"./constructFrom.mjs\";\n\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The start of a year\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\nexport function startOfYear(date) {\n  const cleanDate = toDate(date);\n  const _date = constructFrom(date, 0);\n  _date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfYear;\n", "const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n", "export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n", "import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n", "const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n", "/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n", "import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n", "export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n", "export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n", "import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n", "import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n", "import { differenceInCalendarDays } from \"./differenceInCalendarDays.mjs\";\nimport { startOfYear } from \"./startOfYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of year\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\nexport function getDayOfYear(date) {\n  const _date = toDate(date);\n  const diff = differenceInCalendarDays(_date, startOfYear(_date));\n  const dayOfYear = diff + 1;\n  return dayOfYear;\n}\n\n// Fallback for modularized imports:\nexport default getDayOfYear;\n", "import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfISOWeek } from \"./startOfISOWeek.mjs\";\nimport { startOfISOWeekYear } from \"./startOfISOWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getISOWeek\n * @category ISO Week Helpers\n * @summary Get the ISO week of the given date.\n *\n * @description\n * Get the ISO week of the given date.\n *\n * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The ISO week\n *\n * @example\n * // Which week of the ISO-week numbering year is 2 January 2005?\n * const result = getISOWeek(new Date(2005, 0, 2))\n * //=> 53\n */\nexport function getISOWeek(date) {\n  const _date = toDate(date);\n  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getISOWeek;\n", "import { constructFrom } from \"./constructFrom.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link getWeekYear} function options.\n */\n\n/**\n * @name getWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Get the local week-numbering year of the given date.\n *\n * @description\n * Get the local week-numbering year of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The local week-numbering year\n *\n * @example\n * // Which week numbering year is 26 December 2004 with the default settings?\n * const result = getWeekYear(new Date(2004, 11, 26))\n * //=> 2005\n *\n * @example\n * // Which week numbering year is 26 December 2004 if week starts on Saturday?\n * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })\n * //=> 2004\n *\n * @example\n * // Which week numbering year is 26 December 2004 if the first week contains 4 January?\n * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })\n * //=> 2004\n */\nexport function getWeekYear(date, options) {\n  const _date = toDate(date);\n  const year = _date.getFullYear();\n\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const firstWeekOfNextYear = constructFrom(date, 0);\n  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setHours(0, 0, 0, 0);\n  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);\n\n  const firstWeekOfThisYear = constructFrom(date, 0);\n  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setHours(0, 0, 0, 0);\n  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);\n\n  if (_date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (_date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}\n\n// Fallback for modularized imports:\nexport default getWeekYear;\n", "import { constructFrom } from \"./constructFrom.mjs\";\nimport { getWeekYear } from \"./getWeekYear.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\n\n/**\n * The {@link startOfWeekYear} function options.\n */\n\n/**\n * @name startOfWeekYear\n * @category Week-Numbering Year Helpers\n * @summary Return the start of a local week-numbering year for the given date.\n *\n * @description\n * Return the start of a local week-numbering year.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The start of a week-numbering year\n *\n * @example\n * // The start of an a week-numbering year for 2 July 2005 with default settings:\n * const result = startOfWeekYear(new Date(2005, 6, 2))\n * //=> Sun Dec 26 2004 00:00:00\n *\n * @example\n * // The start of a week-numbering year for 2 July 2005\n * // if Monday is the first day of week\n * // and 4 January is always in the first week of the year:\n * const result = startOfWeekYear(new Date(2005, 6, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> Mon Jan 03 2005 00:00:00\n */\nexport function startOfWeekYear(date, options) {\n  const defaultOptions = getDefaultOptions();\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const year = getWeekYear(date, options);\n  const firstWeek = constructFrom(date, 0);\n  firstWeek.setFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setHours(0, 0, 0, 0);\n  const _date = startOfWeek(firstWeek, options);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfWeekYear;\n", "import { millisecondsInWeek } from \"./constants.mjs\";\nimport { startOfWeek } from \"./startOfWeek.mjs\";\nimport { startOfWeekYear } from \"./startOfWeekYear.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link getWeek} function options.\n */\n\n/**\n * @name getWeek\n * @category Week Helpers\n * @summary Get the local week index of the given date.\n *\n * @description\n * Get the local week index of the given date.\n * The exact calculation depends on the values of\n * `options.weekStartsOn` (which is the index of the first day of the week)\n * and `options.firstWeekContainsDate` (which is the day of January, which is always in\n * the first week of the week-numbering year)\n *\n * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options\n *\n * @returns The week\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005 with default options?\n * const result = getWeek(new Date(2005, 0, 2))\n * //=> 2\n *\n * @example\n * // Which week of the local week numbering year is 2 January 2005,\n * // if Monday is the first day of the week,\n * // and the first week of the year always contains 4 January?\n * const result = getWeek(new Date(2005, 0, 2), {\n *   weekStartsOn: 1,\n *   firstWeekContainsDate: 4\n * })\n * //=> 53\n */\n\nexport function getWeek(date, options) {\n  const _date = toDate(date);\n  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);\n\n  // Round the number of weeks to the nearest integer because the number of\n  // milliseconds in a week is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round(diff / millisecondsInWeek) + 1;\n}\n\n// Fallback for modularized imports:\nexport default getWeek;\n", "export function addLeadingZeros(number, targetLength) {\n  const sign = number < 0 ? \"-\" : \"\";\n  const output = Math.abs(number).toString().padStart(targetLength, \"0\");\n  return sign + output;\n}\n", "import { addLeadingZeros } from \"../addLeadingZeros.mjs\";\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nexport const lightFormatters = {\n  // Year\n  y(date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n\n    const signedYear = date.getFullYear();\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === \"yy\" ? year % 100 : year, token.length);\n  },\n\n  // Month\n  M(date, token) {\n    const month = date.getMonth();\n    return token === \"M\" ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n\n  // Day of the month\n  d(date, token) {\n    return addLeadingZeros(date.getDate(), token.length);\n  },\n\n  // AM or PM\n  a(date, token) {\n    const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return dayPeriodEnumValue.toUpperCase();\n      case \"aaa\":\n        return dayPeriodEnumValue;\n      case \"aaaaa\":\n        return dayPeriodEnumValue[0];\n      case \"aaaa\":\n      default:\n        return dayPeriodEnumValue === \"am\" ? \"a.m.\" : \"p.m.\";\n    }\n  },\n\n  // Hour [1-12]\n  h(date, token) {\n    return addLeadingZeros(date.getHours() % 12 || 12, token.length);\n  },\n\n  // Hour [0-23]\n  H(date, token) {\n    return addLeadingZeros(date.getHours(), token.length);\n  },\n\n  // Minute\n  m(date, token) {\n    return addLeadingZeros(date.getMinutes(), token.length);\n  },\n\n  // Second\n  s(date, token) {\n    return addLeadingZeros(date.getSeconds(), token.length);\n  },\n\n  // Fraction of second\n  S(date, token) {\n    const numberOfDigits = token.length;\n    const milliseconds = date.getMilliseconds();\n    const fractionalSeconds = Math.trunc(\n      milliseconds * Math.pow(10, numberOfDigits - 3),\n    );\n    return addLeadingZeros(fractionalSeconds, token.length);\n  },\n};\n", "import { getDayOfYear } from \"../../getDayOfYear.mjs\";\nimport { getISOWeek } from \"../../getISOWeek.mjs\";\nimport { getISOWeekYear } from \"../../getISOWeekYear.mjs\";\nimport { getWeek } from \"../../getWeek.mjs\";\nimport { getWeekYear } from \"../../getWeekYear.mjs\";\nimport { addLeadingZeros } from \"../addLeadingZeros.mjs\";\nimport { lightFormatters } from \"./lightFormatters.mjs\";\n\nconst dayPeriodEnum = {\n  am: \"am\",\n  pm: \"pm\",\n  midnight: \"midnight\",\n  noon: \"noon\",\n  morning: \"morning\",\n  afternoon: \"afternoon\",\n  evening: \"evening\",\n  night: \"night\",\n};\n\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nexport const formatters = {\n  // Era\n  G: function (date, token, localize) {\n    const era = date.getFullYear() > 0 ? 1 : 0;\n    switch (token) {\n      // AD, BC\n      case \"G\":\n      case \"GG\":\n      case \"GGG\":\n        return localize.era(era, { width: \"abbreviated\" });\n      // A, B\n      case \"GGGGG\":\n        return localize.era(era, { width: \"narrow\" });\n      // Anno Domini, Before Christ\n      case \"GGGG\":\n      default:\n        return localize.era(era, { width: \"wide\" });\n    }\n  },\n\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === \"yo\") {\n      const signedYear = date.getFullYear();\n      // Returns 1 for 1 BC (which is year 0 in JavaScript)\n      const year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, { unit: \"year\" });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    const signedWeekYear = getWeekYear(date, options);\n    // Returns 1 for 1 BC (which is year 0 in JavaScript)\n    const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;\n\n    // Two digit year\n    if (token === \"YY\") {\n      const twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    }\n\n    // Ordinal number\n    if (token === \"Yo\") {\n      return localize.ordinalNumber(weekYear, { unit: \"year\" });\n    }\n\n    // Padding\n    return addLeadingZeros(weekYear, token.length);\n  },\n\n  // ISO week-numbering year\n  R: function (date, token) {\n    const isoWeekYear = getISOWeekYear(date);\n\n    // Padding\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    const year = date.getFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n\n  // Quarter\n  Q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"Q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"QQ\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"Qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"QQQ\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"QQQQQ\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"QQQQ\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    const quarter = Math.ceil((date.getMonth() + 1) / 3);\n    switch (token) {\n      // 1, 2, 3, 4\n      case \"q\":\n        return String(quarter);\n      // 01, 02, 03, 04\n      case \"qq\":\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n      case \"qo\":\n        return localize.ordinalNumber(quarter, { unit: \"quarter\" });\n      // Q1, Q2, Q3, Q4\n      case \"qqq\":\n        return localize.quarter(quarter, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case \"qqqqq\":\n        return localize.quarter(quarter, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // 1st quarter, 2nd quarter, ...\n      case \"qqqq\":\n      default:\n        return localize.quarter(quarter, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // Month\n  M: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      case \"M\":\n      case \"MM\":\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n      case \"Mo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"MMM\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // J, F, ..., D\n      case \"MMMMM\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // January, February, ..., December\n      case \"MMMM\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"formatting\" });\n    }\n  },\n\n  // Stand-alone month\n  L: function (date, token, localize) {\n    const month = date.getMonth();\n    switch (token) {\n      // 1, 2, ..., 12\n      case \"L\":\n        return String(month + 1);\n      // 01, 02, ..., 12\n      case \"LL\":\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case \"Lo\":\n        return localize.ordinalNumber(month + 1, { unit: \"month\" });\n      // Jan, Feb, ..., Dec\n      case \"LLL\":\n        return localize.month(month, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // J, F, ..., D\n      case \"LLLLL\":\n        return localize.month(month, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // January, February, ..., December\n      case \"LLLL\":\n      default:\n        return localize.month(month, { width: \"wide\", context: \"standalone\" });\n    }\n  },\n\n  // Local week of year\n  w: function (date, token, localize, options) {\n    const week = getWeek(date, options);\n\n    if (token === \"wo\") {\n      return localize.ordinalNumber(week, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n\n  // ISO week of year\n  I: function (date, token, localize) {\n    const isoWeek = getISOWeek(date);\n\n    if (token === \"Io\") {\n      return localize.ordinalNumber(isoWeek, { unit: \"week\" });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === \"do\") {\n      return localize.ordinalNumber(date.getDate(), { unit: \"date\" });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n\n  // Day of year\n  D: function (date, token, localize) {\n    const dayOfYear = getDayOfYear(date);\n\n    if (token === \"Do\") {\n      return localize.ordinalNumber(dayOfYear, { unit: \"dayOfYear\" });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n\n  // Day of week\n  E: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    switch (token) {\n      // Tue\n      case \"E\":\n      case \"EE\":\n      case \"EEE\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"EEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"EEEEEE\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"EEEE\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Local day of week\n  e: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case \"e\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"ee\":\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n      case \"eo\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"eee\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"eeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"eeeeee\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"eeee\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    const dayOfWeek = date.getDay();\n    const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case \"c\":\n        return String(localDayOfWeek);\n      // Padded numerical value\n      case \"cc\":\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n      case \"co\":\n        return localize.ordinalNumber(localDayOfWeek, { unit: \"day\" });\n      case \"ccc\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"standalone\",\n        });\n      // T\n      case \"ccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"standalone\",\n        });\n      // Tu\n      case \"cccccc\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"standalone\",\n        });\n      // Tuesday\n      case \"cccc\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"standalone\",\n        });\n    }\n  },\n\n  // ISO day of week\n  i: function (date, token, localize) {\n    const dayOfWeek = date.getDay();\n    const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n    switch (token) {\n      // 2\n      case \"i\":\n        return String(isoDayOfWeek);\n      // 02\n      case \"ii\":\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n      case \"io\":\n        return localize.ordinalNumber(isoDayOfWeek, { unit: \"day\" });\n      // Tue\n      case \"iii\":\n        return localize.day(dayOfWeek, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      // T\n      case \"iiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      // Tu\n      case \"iiiiii\":\n        return localize.day(dayOfWeek, {\n          width: \"short\",\n          context: \"formatting\",\n        });\n      // Tuesday\n      case \"iiii\":\n      default:\n        return localize.day(dayOfWeek, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM or PM\n  a: function (date, token, localize) {\n    const hours = date.getHours();\n    const dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n\n    switch (token) {\n      case \"a\":\n      case \"aa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"aaa\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"aaaaa\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"aaaa\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? \"pm\" : \"am\";\n    }\n\n    switch (token) {\n      case \"b\":\n      case \"bb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"bbb\":\n        return localize\n          .dayPeriod(dayPeriodEnumValue, {\n            width: \"abbreviated\",\n            context: \"formatting\",\n          })\n          .toLowerCase();\n      case \"bbbbb\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"bbbb\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    const hours = date.getHours();\n    let dayPeriodEnumValue;\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case \"B\":\n      case \"BB\":\n      case \"BBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"abbreviated\",\n          context: \"formatting\",\n        });\n      case \"BBBBB\":\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"narrow\",\n          context: \"formatting\",\n        });\n      case \"BBBB\":\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: \"wide\",\n          context: \"formatting\",\n        });\n    }\n  },\n\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === \"ho\") {\n      let hours = date.getHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === \"Ho\") {\n      return localize.ordinalNumber(date.getHours(), { unit: \"hour\" });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    const hours = date.getHours() % 12;\n\n    if (token === \"Ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    let hours = date.getHours();\n    if (hours === 0) hours = 24;\n\n    if (token === \"ko\") {\n      return localize.ordinalNumber(hours, { unit: \"hour\" });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n\n  // Minute\n  m: function (date, token, localize) {\n    if (token === \"mo\") {\n      return localize.ordinalNumber(date.getMinutes(), { unit: \"minute\" });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n\n  // Second\n  s: function (date, token, localize) {\n    if (token === \"so\") {\n      return localize.ordinalNumber(date.getSeconds(), { unit: \"second\" });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return \"Z\";\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"X\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case \"XXXX\":\n      case \"XX\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case \"XXXXX\":\n      case \"XXX\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case \"x\":\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case \"xxxx\":\n      case \"xx\": // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case \"xxxxx\":\n      case \"xxx\": // Hours and minutes with `:` delimiter\n      default:\n        return formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (GMT)\n  O: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"O\":\n      case \"OO\":\n      case \"OOO\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"OOOO\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Timezone (specific non-location)\n  z: function (date, token, _localize) {\n    const timezoneOffset = date.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case \"z\":\n      case \"zz\":\n      case \"zzz\":\n        return \"GMT\" + formatTimezoneShort(timezoneOffset, \":\");\n      // Long\n      case \"zzzz\":\n      default:\n        return \"GMT\" + formatTimezone(timezoneOffset, \":\");\n    }\n  },\n\n  // Seconds timestamp\n  t: function (date, token, _localize) {\n    const timestamp = Math.trunc(date.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n\n  // Milliseconds timestamp\n  T: function (date, token, _localize) {\n    const timestamp = date.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  },\n};\n\nfunction formatTimezoneShort(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = Math.trunc(absOffset / 60);\n  const minutes = absOffset % 60;\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, delimiter) {\n  if (offset % 60 === 0) {\n    const sign = offset > 0 ? \"-\" : \"+\";\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n  return formatTimezone(offset, delimiter);\n}\n\nfunction formatTimezone(offset, delimiter = \"\") {\n  const sign = offset > 0 ? \"-\" : \"+\";\n  const absOffset = Math.abs(offset);\n  const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);\n  const minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n", "const dateLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"P\":\n      return formatLong.date({ width: \"short\" });\n    case \"PP\":\n      return formatLong.date({ width: \"medium\" });\n    case \"PPP\":\n      return formatLong.date({ width: \"long\" });\n    case \"PPPP\":\n    default:\n      return formatLong.date({ width: \"full\" });\n  }\n};\n\nconst timeLongFormatter = (pattern, formatLong) => {\n  switch (pattern) {\n    case \"p\":\n      return formatLong.time({ width: \"short\" });\n    case \"pp\":\n      return formatLong.time({ width: \"medium\" });\n    case \"ppp\":\n      return formatLong.time({ width: \"long\" });\n    case \"pppp\":\n    default:\n      return formatLong.time({ width: \"full\" });\n  }\n};\n\nconst dateTimeLongFormatter = (pattern, formatLong) => {\n  const matchResult = pattern.match(/(P+)(p+)?/) || [];\n  const datePattern = matchResult[1];\n  const timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  let dateTimeFormat;\n\n  switch (datePattern) {\n    case \"P\":\n      dateTimeFormat = formatLong.dateTime({ width: \"short\" });\n      break;\n    case \"PP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"medium\" });\n      break;\n    case \"PPP\":\n      dateTimeFormat = formatLong.dateTime({ width: \"long\" });\n      break;\n    case \"PPPP\":\n    default:\n      dateTimeFormat = formatLong.dateTime({ width: \"full\" });\n      break;\n  }\n\n  return dateTimeFormat\n    .replace(\"{{date}}\", dateLongFormatter(datePattern, formatLong))\n    .replace(\"{{time}}\", timeLongFormatter(timePattern, formatLong));\n};\n\nexport const longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter,\n};\n", "const dayOfYearTokenRE = /^D+$/;\nconst weekYearTokenRE = /^Y+$/;\n\nconst throwTokens = [\"D\", \"DD\", \"YY\", \"YYYY\"];\n\nexport function isProtectedDayOfYearToken(token) {\n  return dayOfYearTokenRE.test(token);\n}\n\nexport function isProtectedWeekYearToken(token) {\n  return weekYearTokenRE.test(token);\n}\n\nexport function warnOrThrowProtectedError(token, format, input) {\n  const _message = message(token, format, input);\n  console.warn(_message);\n  if (throwTokens.includes(token)) throw new RangeError(_message);\n}\n\nfunction message(token, format, input) {\n  const subject = token[0] === \"Y\" ? \"years\" : \"days of the month\";\n  return `Use \\`${token.toLowerCase()}\\` instead of \\`${token}\\` (in \\`${format}\\`) for formatting ${subject} to the input \\`${input}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\n", "import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { formatters } from \"./_lib/format/formatters.mjs\";\nimport { longFormatters } from \"./_lib/format/longFormatters.mjs\";\nimport {\n  isProtectedDayOfYearToken,\n  isProtectedWeekYearToken,\n  warnOrThrowProtectedError,\n} from \"./_lib/protectedTokens.mjs\";\nimport { isValid } from \"./isValid.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n// Rexports of internal for libraries to use.\n// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874\nexport { formatters, longFormatters };\n\n// This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\nconst formattingTokensRegExp =\n  /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g;\n\n// This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\nconst longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\n\nconst escapedStringRegExp = /^'([^]*?)'?$/;\nconst doubleQuoteRegExp = /''/g;\nconst unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n\nexport { format as formatDate };\n\n/**\n * The {@link format} function options.\n */\n\n/**\n * @name format\n * @alias formatDate\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > \u26A0\uFE0F Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)\n *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n * @param format - The string of tokens\n * @param options - An object with options\n *\n * @returns The formatted date string\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `localize` property\n * @throws `options.locale` must contain `formatLong` property\n * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md\n * @throws format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * const result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\nexport function format(date, formatStr, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const firstWeekContainsDate =\n    options?.firstWeekContainsDate ??\n    options?.locale?.options?.firstWeekContainsDate ??\n    defaultOptions.firstWeekContainsDate ??\n    defaultOptions.locale?.options?.firstWeekContainsDate ??\n    1;\n\n  const weekStartsOn =\n    options?.weekStartsOn ??\n    options?.locale?.options?.weekStartsOn ??\n    defaultOptions.weekStartsOn ??\n    defaultOptions.locale?.options?.weekStartsOn ??\n    0;\n\n  const originalDate = toDate(date);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  let parts = formatStr\n    .match(longFormattingTokensRegExp)\n    .map((substring) => {\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"p\" || firstCharacter === \"P\") {\n        const longFormatter = longFormatters[firstCharacter];\n        return longFormatter(substring, locale.formatLong);\n      }\n      return substring;\n    })\n    .join(\"\")\n    .match(formattingTokensRegExp)\n    .map((substring) => {\n      // Replace two single quote characters with one single quote character\n      if (substring === \"''\") {\n        return { isToken: false, value: \"'\" };\n      }\n\n      const firstCharacter = substring[0];\n      if (firstCharacter === \"'\") {\n        return { isToken: false, value: cleanEscapedString(substring) };\n      }\n\n      if (formatters[firstCharacter]) {\n        return { isToken: true, value: substring };\n      }\n\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError(\n          \"Format string contains an unescaped latin alphabet character `\" +\n            firstCharacter +\n            \"`\",\n        );\n      }\n\n      return { isToken: false, value: substring };\n    });\n\n  // invoke localize preprocessor (only for french locales at the moment)\n  if (locale.localize.preprocessor) {\n    parts = locale.localize.preprocessor(originalDate, parts);\n  }\n\n  const formatterOptions = {\n    firstWeekContainsDate,\n    weekStartsOn,\n    locale,\n  };\n\n  return parts\n    .map((part) => {\n      if (!part.isToken) return part.value;\n\n      const token = part.value;\n\n      if (\n        (!options?.useAdditionalWeekYearTokens &&\n          isProtectedWeekYearToken(token)) ||\n        (!options?.useAdditionalDayOfYearTokens &&\n          isProtectedDayOfYearToken(token))\n      ) {\n        warnOrThrowProtectedError(token, formatStr, String(date));\n      }\n\n      const formatter = formatters[token[0]];\n      return formatter(originalDate, token, locale.localize, formatterOptions);\n    })\n    .join(\"\");\n}\n\nfunction cleanEscapedString(input) {\n  const matched = input.match(escapedStringRegExp);\n\n  if (!matched) {\n    return input;\n  }\n\n  return matched[1].replace(doubleQuoteRegExp, \"'\");\n}\n\n// Fallback for modularized imports:\nexport default format;\n", "import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n *\n * @returns The day of week, 0 represents Sunday\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\nexport function getDay(date) {\n  const _date = toDate(date);\n  const day = _date.getDay();\n  return day;\n}\n\n// Fallback for modularized imports:\nexport default getDay;\n", "import { addDays } from \"./addDays.mjs\";\nimport { getDay } from \"./getDay.mjs\";\n\n/**\n * @name nextDay\n * @category Weekday Helpers\n * @summary When is the next day of the week?\n *\n * @description\n * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n * @param day - day of the week\n *\n * @returns The date is the next day of week\n *\n * @example\n * // When is the next Monday after Mar, 20, 2020?\n * const result = nextDay(new Date(2020, 2, 20), 1)\n * //=> Mon Mar 23 2020 00:00:00\n *\n * @example\n * // When is the next Tuesday after Mar, 21, 2020?\n * const result = nextDay(new Date(2020, 2, 21), 2)\n * //=> Tue Mar 24 2020 00:00:00\n */\nexport function nextDay(date, day) {\n  let delta = day - getDay(date);\n  if (delta <= 0) delta += 7;\n\n  return addDays(date, delta);\n}\n\n// Fallback for modularized imports:\nexport default nextDay;\n", "import { nextDay } from \"./nextDay.mjs\";\n\n/**\n * @name nextFriday\n * @category Weekday Helpers\n * @summary When is the next Friday?\n *\n * @description\n * When is the next Friday?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to start counting from\n *\n * @returns The next Friday\n *\n * @example\n * // When is the next Friday after Mar, 22, 2020?\n * const result = nextFriday(new Date(2020, 2, 22))\n * //=> Fri Mar 27 2020 00:00:00\n */\nexport function nextFriday(date) {\n  return nextDay(date, 5);\n}\n\n// Fallback for modularized imports:\nexport default nextFriday;\n", "import { nextDay } from \"./nextDay.mjs\";\n\n/**\n * @name nextSaturday\n * @category Weekday Helpers\n * @summary When is the next Saturday?\n *\n * @description\n * When is the next Saturday?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to start counting from\n *\n * @returns The next Saturday\n *\n * @example\n * // When is the next Saturday after Mar, 22, 2020?\n * const result = nextSaturday(new Date(2020, 2, 22))\n * //=> Sat Mar 28 2020 00:00:00\n */\nexport function nextSaturday(date) {\n  return nextDay(date, 6);\n}\n\n// Fallback for modularized imports:\nexport default nextSaturday;\n", "import { nextDay } from \"./nextDay.mjs\";\n\n/**\n * @name nextSunday\n * @category Weekday Helpers\n * @summary When is the next Sunday?\n *\n * @description\n * When is the next Sunday?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to start counting from\n *\n * @returns The next Sunday\n *\n * @example\n * // When is the next Sunday after Mar, 22, 2020?\n * const result = nextSunday(new Date(2020, 2, 22))\n * //=> Sun Mar 29 2020 00:00:00\n */\nexport function nextSunday(date) {\n  return nextDay(date, 0);\n}\n\n// Fallback for modularized imports:\nexport default nextSunday;\n", "import { addHours } from \"./addHours.mjs\";\n\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be subtracted.\n *\n * @returns The new date with the hours subtracted\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\nexport function subHours(date, amount) {\n  return addHours(date, -amount);\n}\n\n// Fallback for modularized imports:\nexport default subHours;\n", "\nimport { environment } from \"@raycast/api\";\nimport { join } from \"path\";\nimport { chmod } from \"fs/promises\";\nimport { spawn } from \"child_process\";\n\nasync function runSwiftFunction(command, ...args) {\n  const swiftPath = join(environment.assetsPath, \"compiled_raycast_swift/AppleReminders\");\n  await chmod(swiftPath, \"755\");\n\n  return new Promise((resolve, reject) => {\n    const commandArgs = [command];\n    for (const arg of args) {\n      try {\n        commandArgs.push(JSON.stringify(arg, (k, v) => v === undefined ? null : v));\n      } catch (err) {\n        reject(new SwiftError(\"Failed to serialize input to JSON: \" + err.message));\n        return;\n      }\n    }\n    const child = spawn(swiftPath, commandArgs);\n    const stdout = [];\n    const stderr = [];\n\n    child.stdout?.on(\"data\", (data) => {\n      stdout.push(data.toString());\n    });\n    child.stderr?.on(\"data\", (data) => {\n      stderr.push(data.toString());\n    });\n\n    child.on(\"exit\", (code) => {\n      if (code === 0) {\n        try {\n          const result = stdout.join(\"\").trim();\n          if (result.length != 0) {\n            resolve(JSON.parse(result));\n          } else {\n            resolve(null);\n          }\n        } catch (err) {\n          const error = new SwiftError(\"Failed to deserialize result from JSON: \" + err.message);\n          error.stdout = stdout.join(\"\").trim();\n          error.stderr = stderr.join(\"\").trim();\n          reject(error);\n        }\n      } else {\n        const error = new SwiftError(stderr.join(\"\").trim() || stdout.join(\"\").trim() || \"Could not get any data\");\n        error.stdout = stdout.join(\"\").trim();\n        error.stderr = stderr.join(\"\").trim();\n        reject(error);\n      }\n    });\n\n    child.on(\"error\", (error) => {\n      reject(error);\n    });\n  });\n}\n\nexport async function getData() {\n  return await runSwiftFunction(\"getData\")\n}\n\nexport async function getCompletedReminders(listId) {\n  return await runSwiftFunction(\"getCompletedReminders\", listId)\n}\n\nexport async function createReminder(newReminder) {\n  return await runSwiftFunction(\"createReminder\", newReminder)\n}\n\nexport async function setTitleAndNotes(payload) {\n  return await runSwiftFunction(\"setTitleAndNotes\", payload)\n}\n\nexport async function toggleCompletionStatus(reminderId) {\n  return await runSwiftFunction(\"toggleCompletionStatus\", reminderId)\n}\n\nexport async function setPriorityStatus(payload) {\n  return await runSwiftFunction(\"setPriorityStatus\", payload)\n}\n\nexport async function setDueDate(payload) {\n  return await runSwiftFunction(\"setDueDate\", payload)\n}\n\nexport async function deleteReminder(reminderId) {\n  return await runSwiftFunction(\"deleteReminder\", reminderId)\n}\n\nexport async function setLocation(payload) {\n  return await runSwiftFunction(\"setLocation\", payload)\n}\n\nexport class SwiftError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = \"SwiftError\";\n  }\n}\n"],
  "mappings": "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",
  "names": ["require_quarterOfYear", "__commonJSMin", "exports", "module", "t", "n", "e", "i", "r", "s", "u", "o", "require_dayjs_min", "__commonJSMin", "exports", "module", "t", "n", "r", "s", "u", "a", "o", "c", "f", "h", "d", "l", "$", "y", "M", "e", "m", "v", "i", "g", "D", "p", "S", "_", "w", "O", "b", "k", "quick_add_reminder_exports", "__export", "Command", "__toCommonJS", "import_api", "import_quarterOfYear", "import_dayjs", "Meridiem", "Weekday", "Month", "implyTheNextDay", "component", "targetDayJs", "implySimilarDate", "implySimilarTime", "assignSimilarDate", "assignSimilarTime", "Meridiem", "import_dayjs", "TIMEZONE_ABBR_MAP", "year", "getLastWeekdayOfMonth", "Month", "Weekday", "getNthWeekdayOfMonth", "month", "weekday", "hour", "dayOfMonth", "i", "oneIndexedWeekday", "date", "firstWeekdayNextMonth", "dayDiff", "toTimezoneOffset", "timezoneInput", "timezoneOverrides", "matchedTimezone", "dayjs", "dayjs", "quarterOfYear", "ReferenceWithTimezone", "input", "toTimezoneOffset", "date", "overrideTimezoneOffset", "currentTimezoneOffset", "targetTimezoneOffset", "ParsingComponents", "_ParsingComponents", "reference", "knownComponents", "key", "refDayJs", "component", "value", "timezoneAdjustment", "tag", "tags", "fragments", "components", "assignSimilarTime", "assignSimilarDate", "implySimilarTime", "ParsingResult", "_ParsingResult", "index", "text", "start", "end", "result", "combinedTags", "repeatedTimeunitPattern", "prefix", "singleTimeunitPattern", "connectorPattern", "singleTimeunitPatternNoCapture", "extractTerms", "dictionary", "keys", "matchAnyPattern", "a", "b", "import_dayjs", "findMostLikelyADYear", "yearNumber", "findYearClosestToRef", "refDate", "day", "month", "refMoment", "dayjs", "dateMoment", "nextYear", "lastYear", "WEEKDAY_DICTIONARY", "FULL_MONTH_NAME_DICTIONARY", "MONTH_DICTIONARY", "INTEGER_WORD_DICTIONARY", "ORDINAL_WORD_DICTIONARY", "TIME_UNIT_DICTIONARY_NO_ABBR", "TIME_UNIT_DICTIONARY", "NUMBER_PATTERN", "matchAnyPattern", "parseNumberPattern", "match", "num", "ORDINAL_NUMBER_PATTERN", "parseOrdinalNumberPattern", "YEAR_PATTERN", "parseYear", "rawYearNumber", "findMostLikelyADYear", "SINGLE_TIME_UNIT_PATTERN", "SINGLE_TIME_UNIT_REGEX", "SINGLE_TIME_UNIT_NO_ABBR_PATTERN", "TIME_UNIT_CONNECTOR_PATTERN", "TIME_UNITS_PATTERN", "repeatedTimeunitPattern", "TIME_UNITS_NO_ABBR_PATTERN", "parseTimeUnits", "timeunitText", "fragments", "remainingText", "collectDateTimeFragment", "unit", "AbstractParserWithWordBoundaryChecking", "context", "currentInnerPattern", "match", "header", "PATTERN_WITH_OPTIONAL_PREFIX", "TIME_UNITS_PATTERN", "PATTERN_WITH_PREFIX", "PATTERN_WITH_PREFIX_STRICT", "TIME_UNITS_NO_ABBR_PATTERN", "ENTimeUnitWithinFormatParser", "AbstractParserWithWordBoundaryChecking", "strictMode", "context", "match", "timeUnits", "parseTimeUnits", "ParsingComponents", "PATTERN", "ORDINAL_NUMBER_PATTERN", "matchAnyPattern", "MONTH_DICTIONARY", "YEAR_PATTERN", "DATE_GROUP", "DATE_TO_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "ENMonthNameLittleEndianParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "result", "month", "day", "parseOrdinalNumberPattern", "yearNumber", "parseYear", "year", "findYearClosestToRef", "endDate", "PATTERN", "matchAnyPattern", "MONTH_DICTIONARY", "ORDINAL_NUMBER_PATTERN", "YEAR_PATTERN", "MONTH_NAME_GROUP", "DATE_GROUP", "DATE_TO_GROUP", "YEAR_GROUP", "ENMonthNameMiddleEndianParser", "AbstractParserWithWordBoundaryChecking", "shouldSkipYearLikeDate", "context", "match", "month", "day", "parseOrdinalNumberPattern", "components", "year", "parseYear", "findYearClosestToRef", "endDate", "result", "PATTERN", "matchAnyPattern", "MONTH_DICTIONARY", "YEAR_PATTERN", "PREFIX_GROUP", "MONTH_NAME_GROUP", "YEAR_GROUP", "ENMonthNameParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "monthName", "FULL_MONTH_NAME_DICTIONARY", "result", "month", "year", "parseYear", "findYearClosestToRef", "PATTERN", "matchAnyPattern", "MONTH_DICTIONARY", "YEAR_NUMBER_GROUP", "MONTH_NAME_GROUP", "MONTH_NUMBER_GROUP", "DATE_NUMBER_GROUP", "ENCasualYearMonthDayParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "month", "year", "PATTERN", "MONTH_GROUP", "YEAR_GROUP", "ENSlashMonthFormatParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "year", "month", "primaryTimePattern", "leftBoundary", "primaryPrefix", "primarySuffix", "flags", "followingTimePatten", "followingPhase", "followingSuffix", "HOUR_GROUP", "MINUTE_GROUP", "SECOND_GROUP", "MILLI_SECOND_GROUP", "AM_PM_HOUR_GROUP", "AbstractTimeExpressionParser", "strictMode", "context", "match", "startComponents", "index", "text", "result", "remainingText", "followingMatch", "strict", "components", "minute", "meridiem", "hour", "Meridiem", "ampm", "millisecond", "second", "endingWithNumbers", "endingNumbers", "startingNumbers", "endingNumberVal", "startingNumberVal", "ENTimeExpressionParser", "AbstractTimeExpressionParser", "strictMode", "context", "match", "components", "hour", "Meridiem", "reverseTimeUnits", "timeUnits", "reversed", "key", "addImpliedTimeUnits", "components", "output", "date", "PATTERN", "TIME_UNITS_PATTERN", "STRICT_PATTERN", "TIME_UNITS_NO_ABBR_PATTERN", "ENTimeUnitAgoFormatParser", "AbstractParserWithWordBoundaryChecking", "strictMode", "context", "match", "timeUnits", "parseTimeUnits", "outputTimeUnits", "reverseTimeUnits", "ParsingComponents", "PATTERN", "TIME_UNITS_PATTERN", "STRICT_PATTERN", "TIME_UNITS_NO_ABBR_PATTERN", "GROUP_NUM_TIMEUNITS", "ENTimeUnitLaterFormatParser", "AbstractParserWithWordBoundaryChecking", "strictMode", "context", "match", "fragments", "parseTimeUnits", "ParsingComponents", "Filter", "context", "results", "r", "MergingRefiner", "mergedResults", "curResult", "nextResult", "i", "textBetween", "left", "right", "mergedResult", "AbstractMergeDateRangeRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "fromResult", "toResult", "key", "fromMoment", "toMoment", "result", "ENMergeDateRangeRefiner", "AbstractMergeDateRangeRefiner", "mergeDateTimeResult", "dateResult", "timeResult", "result", "beginDate", "beginTime", "mergeDateTimeComponent", "endDate", "endTime", "endDateTime", "nextDayJs", "assignSimilarDate", "implySimilarDate", "dateComponent", "timeComponent", "dateTimeComponent", "Meridiem", "AbstractMergeDateTimeRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "result", "mergeDateTimeResult", "ENMergeDateTimeRefiner", "AbstractMergeDateTimeRefiner", "TIMEZONE_NAME_PATTERN", "ExtractTimezoneAbbrRefiner", "timezoneOverrides", "context", "results", "result", "suffix", "match", "timezoneAbbr", "refDate", "tzOverrides", "extractedTimezoneOffset", "toTimezoneOffset", "currentTimezoneOffset", "TIMEZONE_OFFSET_PATTERN", "TIMEZONE_OFFSET_SIGN_GROUP", "TIMEZONE_OFFSET_HOUR_OFFSET_GROUP", "TIMEZONE_OFFSET_MINUTE_OFFSET_GROUP", "ExtractTimezoneOffsetRefiner", "context", "results", "result", "suffix", "match", "hourOffset", "minuteOffset", "timezoneOffset", "OverlapRemovalRefiner", "context", "results", "filteredResults", "prevResult", "i", "result", "kept", "removed", "import_dayjs", "ForwardDateRefiner", "context", "results", "result", "refMoment", "dayjs", "implySimilarDate", "i", "UnlikelyFormatFilter", "Filter", "strictMode", "context", "result", "PATTERN", "YEAR_NUMBER_GROUP", "MONTH_NUMBER_GROUP", "DATE_NUMBER_GROUP", "HOUR_NUMBER_GROUP", "MINUTE_NUMBER_GROUP", "SECOND_NUMBER_GROUP", "MILLISECOND_NUMBER_GROUP", "TZD_HOUR_OFFSET_GROUP", "TZD_MINUTE_OFFSET_GROUP", "ISOFormatParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "components", "hourOffset", "minuteOffset", "offset", "MergeWeekdayComponentRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "newResult", "includeCommonConfiguration", "configuration", "strictMode", "ISOFormatParser", "MergeWeekdayComponentRefiner", "ExtractTimezoneOffsetRefiner", "OverlapRemovalRefiner", "ExtractTimezoneAbbrRefiner", "ForwardDateRefiner", "UnlikelyFormatFilter", "import_dayjs", "import_dayjs", "now", "reference", "targetDate", "dayjs", "component", "ParsingComponents", "assignSimilarDate", "assignSimilarTime", "today", "implySimilarTime", "yesterday", "theDayBefore", "numDay", "theDayAfter", "tomorrow", "nDays", "tonight", "implyHour", "Meridiem", "evening", "reference", "implyHour", "component", "ParsingComponents", "Meridiem", "midnight", "reference", "component", "ParsingComponents", "targetDate", "dayjs", "implyTheNextDay", "morning", "implyHour", "Meridiem", "afternoon", "noon", "PATTERN", "ENCasualDateParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "targetDate", "dayjs", "lowerText", "component", "now", "today", "yesterday", "tomorrow", "tonight", "assignSimilarDate", "PATTERN", "ENCasualTimeParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "component", "afternoon", "evening", "midnight", "morning", "noon", "createParsingComponentsAtWeekday", "reference", "weekday", "modifier", "refDate", "daysToWeekday", "getDaysToWeekday", "components", "ParsingComponents", "addImpliedTimeUnits", "refWeekday", "getDaysForwardToWeekday", "getBackwardDaysToWeekday", "Weekday", "getDaysToWeekdayClosest", "backward", "forward", "forwardCount", "backwardCount", "PATTERN", "matchAnyPattern", "WEEKDAY_DICTIONARY", "PREFIX_GROUP", "WEEKDAY_GROUP", "POSTFIX_GROUP", "ENWeekdayParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "dayOfWeek", "weekday", "prefix", "postfix", "modifierWord", "modifier", "createParsingComponentsAtWeekday", "import_dayjs", "PATTERN", "matchAnyPattern", "TIME_UNIT_DICTIONARY", "MODIFIER_WORD_GROUP", "RELATIVE_WORD_GROUP", "ENRelativeDateFormatParser", "AbstractParserWithWordBoundaryChecking", "context", "match", "modifier", "unitWord", "timeunit", "timeUnits", "ParsingComponents", "components", "date", "dayjs", "PATTERN", "OPENING_GROUP", "ENDING_GROUP", "FIRST_NUMBERS_GROUP", "SECOND_NUMBERS_GROUP", "YEAR_GROUP", "SlashDateFormatParser", "littleEndian", "context", "match", "previousChar", "index", "text", "result", "month", "day", "rawYearNumber", "year", "findMostLikelyADYear", "findYearClosestToRef", "PATTERN", "TIME_UNITS_PATTERN", "PATTERN_NO_ABBR", "TIME_UNITS_NO_ABBR_PATTERN", "ENTimeUnitCasualRelativeFormatParser", "AbstractParserWithWordBoundaryChecking", "allowAbbreviations", "context", "match", "prefix", "timeUnits", "parseTimeUnits", "reverseTimeUnits", "ParsingComponents", "IsPositiveFollowingReference", "result", "IsNegativeFollowingReference", "ENMergeRelativeAfterDateRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "context", "timeUnits", "parseTimeUnits", "reverseTimeUnits", "components", "ParsingComponents", "ReferenceWithTimezone", "ParsingResult", "hasImpliedEarlierReferenceDate", "result", "hasImpliedLaterReferenceDate", "ENMergeRelativeFollowByDateRefiner", "MergingRefiner", "textBetween", "currentResult", "nextResult", "timeUnits", "parseTimeUnits", "reverseTimeUnits", "components", "ParsingComponents", "ReferenceWithTimezone", "ParsingResult", "ENDefaultConfiguration", "littleEndian", "option", "ENCasualDateParser", "ENCasualTimeParser", "ENMonthNameParser", "ENRelativeDateFormatParser", "ENTimeUnitCasualRelativeFormatParser", "strictMode", "options", "includeCommonConfiguration", "SlashDateFormatParser", "ENTimeUnitWithinFormatParser", "ENMonthNameLittleEndianParser", "ENMonthNameMiddleEndianParser", "ENWeekdayParser", "ENCasualYearMonthDayParser", "ENSlashMonthFormatParser", "ENTimeExpressionParser", "ENTimeUnitAgoFormatParser", "ENTimeUnitLaterFormatParser", "ENMergeDateTimeRefiner", "ENMergeRelativeFollowByDateRefiner", "ENMergeRelativeAfterDateRefiner", "OverlapRemovalRefiner", "ENMergeDateRangeRefiner", "Chrono", "_Chrono", "configuration", "ENDefaultConfiguration", "text", "referenceDate", "option", "results", "context", "ParsingContext", "parser", "parsedResults", "a", "b", "refiner", "pattern", "originalText", "remainingText", "match", "index", "result", "parsedResult", "ParsingResult", "ParsingComponents", "parsedIndex", "parsedText", "refDate", "ReferenceWithTimezone", "components", "textOrEndIndex", "startComponents", "endComponents", "start", "end", "block", "configuration", "ENDefaultConfiguration", "casual", "Chrono", "strict", "GB", "casual", "parse", "text", "ref", "option", "toDate", "argument", "argStr", "constructFrom", "date", "value", "addDays", "date", "amount", "_date", "toDate", "constructFrom", "addMonths", "date", "amount", "_date", "toDate", "constructFrom", "dayOfMonth", "endOfDesiredMonth", "daysInMonth", "addMilliseconds", "date", "amount", "timestamp", "toDate", "constructFrom", "maxTime", "minTime", "millisecondsInWeek", "millisecondsInDay", "millisecondsInHour", "secondsInHour", "secondsInDay", "secondsInHour", "secondsInWeek", "secondsInYear", "secondsInMonth", "secondsInQuarter", "addHours", "date", "amount", "addMilliseconds", "millisecondsInHour", "defaultOptions", "getDefaultOptions", "startOfWeek", "date", "options", "defaultOptions", "getDefaultOptions", "weekStartsOn", "_date", "toDate", "day", "diff", "startOfISOWeek", "date", "startOfWeek", "getISOWeekYear", "date", "_date", "toDate", "year", "fourthOfJanuaryOfNextYear", "constructFrom", "startOfNextYear", "startOfISOWeek", "fourthOfJanuaryOfThisYear", "startOfThisYear", "startOfDay", "date", "_date", "toDate", "getTimezoneOffsetInMilliseconds", "date", "_date", "toDate", "utcDate", "differenceInCalendarDays", "dateLeft", "dateRight", "startOfDayLeft", "startOfDay", "startOfDayRight", "timestampLeft", "getTimezoneOffsetInMilliseconds", "timestampRight", "millisecondsInDay", "startOfISOWeekYear", "date", "year", "getISOWeekYear", "fourthOfJanuary", "constructFrom", "startOfISOWeek", "addYears", "date", "amount", "addMonths", "isDate", "value", "isValid", "date", "isDate", "_date", "toDate", "startOfYear", "date", "cleanDate", "toDate", "_date", "constructFrom", "formatDistanceLocale", "formatDistance", "token", "count", "options", "result", "tokenValue", "buildFormatLongFn", "args", "options", "width", "dateFormats", "timeFormats", "dateTimeFormats", "formatLong", "buildFormatLongFn", "formatRelativeLocale", "formatRelative", "token", "_date", "_baseDate", "_options", "buildLocalizeFn", "args", "value", "options", "context", "valuesArray", "defaultWidth", "width", "index", "eraValues", "quarterValues", "monthValues", "dayValues", "dayPeriodValues", "formattingDayPeriodValues", "ordinalNumber", "dirtyNumber", "_options", "number", "rem100", "localize", "buildLocalizeFn", "quarter", "buildMatchFn", "args", "string", "options", "width", "matchPattern", "matchResult", "matchedString", "parsePatterns", "key", "findIndex", "pattern", "findKey", "value", "rest", "object", "predicate", "array", "buildMatchPatternFn", "args", "string", "options", "matchResult", "matchedString", "parseResult", "value", "rest", "matchOrdinalNumberPattern", "parseOrdinalNumberPattern", "matchEraPatterns", "parseEraPatterns", "matchQuarterPatterns", "parseQuarterPatterns", "matchMonthPatterns", "parseMonthPatterns", "matchDayPatterns", "parseDayPatterns", "matchDayPeriodPatterns", "parseDayPeriodPatterns", "match", "buildMatchPatternFn", "value", "buildMatchFn", "index", "enUS", "formatDistance", "formatLong", "formatRelative", "localize", "match", "getDayOfYear", "date", "_date", "toDate", "differenceInCalendarDays", "startOfYear", "getISOWeek", "date", "_date", "toDate", "diff", "startOfISOWeek", "startOfISOWeekYear", "millisecondsInWeek", "getWeekYear", "date", "options", "_date", "toDate", "year", "defaultOptions", "getDefaultOptions", "firstWeekContainsDate", "firstWeekOfNextYear", "constructFrom", "startOfNextYear", "startOfWeek", "firstWeekOfThisYear", "startOfThisYear", "startOfWeekYear", "date", "options", "defaultOptions", "getDefaultOptions", "firstWeekContainsDate", "year", "getWeekYear", "firstWeek", "constructFrom", "startOfWeek", "getWeek", "date", "options", "_date", "toDate", "diff", "startOfWeek", "startOfWeekYear", "millisecondsInWeek", "addLeadingZeros", "number", "targetLength", "sign", "output", "lightFormatters", "date", "token", "signedYear", "year", "addLeadingZeros", "month", "dayPeriodEnumValue", "numberOfDigits", "milliseconds", "fractionalSeconds", "dayPeriodEnum", "formatters", "date", "token", "localize", "era", "signedYear", "year", "lightFormatters", "options", "signedWeekYear", "getWeekYear", "weekYear", "twoDigitYear", "addLeadingZeros", "isoWeekYear", "getISOWeekYear", "quarter", "month", "week", "getWeek", "isoWeek", "getISOWeek", "dayOfYear", "getDayOfYear", "dayOfWeek", "localDayOfWeek", "isoDayOfWeek", "dayPeriodEnumValue", "hours", "_localize", "timezoneOffset", "formatTimezoneWithOptionalMinutes", "formatTimezone", "formatTimezoneShort", "timestamp", "offset", "delimiter", "sign", "absOffset", "minutes", "dateLongFormatter", "pattern", "formatLong", "timeLongFormatter", "dateTimeLongFormatter", "matchResult", "datePattern", "timePattern", "dateTimeFormat", "longFormatters", "dayOfYearTokenRE", "weekYearTokenRE", "throwTokens", "isProtectedDayOfYearToken", "token", "isProtectedWeekYearToken", "warnOrThrowProtectedError", "format", "input", "_message", "message", "subject", "formattingTokensRegExp", "longFormattingTokensRegExp", "escapedStringRegExp", "doubleQuoteRegExp", "unescapedLatinCharacterRegExp", "format", "date", "formatStr", "options", "defaultOptions", "getDefaultOptions", "locale", "enUS", "firstWeekContainsDate", "weekStartsOn", "originalDate", "toDate", "isValid", "parts", "longFormattingTokensRegExp", "substring", "firstCharacter", "longFormatter", "longFormatters", "formattingTokensRegExp", "cleanEscapedString", "formatters", "unescapedLatinCharacterRegExp", "formatterOptions", "part", "token", "isProtectedWeekYearToken", "isProtectedDayOfYearToken", "warnOrThrowProtectedError", "formatter", "input", "matched", "escapedStringRegExp", "doubleQuoteRegExp", "getDay", "date", "toDate", "nextDay", "date", "day", "delta", "getDay", "addDays", "nextFriday", "date", "nextDay", "nextSaturday", "date", "nextDay", "nextSunday", "date", "nextDay", "subHours", "date", "amount", "addHours", "import_api", "import_path", "import_promises", "import_child_process", "runSwiftFunction", "command", "args", "swiftPath", "resolve", "reject", "commandArgs", "arg", "k", "v", "err", "SwiftError", "child", "stdout", "stderr", "data", "code", "result", "error", "getData", "createReminder", "newReminder", "runSwiftFunction", "SwiftError", "message", "Command", "props", "preferences", "text", "reminderList", "dueDate", "isDateTime", "dateMatch", "parse", "chronoDate", "date", "format", "listMatch", "getData", "list", "title", "reminder", "createReminder", "formattedDueDate", "toastMessage", "lists", "now", "today", "currentTime", "tomorrow", "addDays", "friday", "nextFriday", "saturday", "nextSaturday", "sunday", "nextSunday", "recentDate", "recentDateMonth", "recentDateDay", "nextRecentDate", "addYears", "upcoming", "upcomingDate", "upcomingDateWeekday", "upcomingDateWeekdayNext", "oneHourAgo", "subHours", "oneHourAgoTomorrow", "oneHourFromNow", "oneHourFromNowToday", "locations", "prompt", "description", "newReminder", "askAI", "timezoneOffset", "error", "message", "i", "jsonMatch", "json"]
}
